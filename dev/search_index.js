var documenterSearchIndex = {"docs":
[{"location":"function_references/#QuantumCircuitOpt.jl-Function-References","page":"Function References","title":"QuantumCircuitOpt.jl Function References","text":"","category":"section"},{"location":"function_references/","page":"Function References","title":"Function References","text":"Modules = [QuantumCircuitOpt]","category":"page"},{"location":"function_references/#QuantumCircuitOpt.GateData","page":"Function References","title":"QuantumCircuitOpt.GateData","text":"GateData\n\nThe composite mutable struct, GateData, type of the gate, the complex matrix form  of the gate, full sized real form of the gate, inverse of the gate and a boolean which states if the gate has all real entries.\n\n\n\n\n\n","category":"type"},{"location":"function_references/#QuantumCircuitOpt.QuantumCircuitModel","page":"Function References","title":"QuantumCircuitOpt.QuantumCircuitModel","text":"QuantumCircuitModel\n\nThe composite mutable struct, QuantumCircuitModel, holds dictionaries for input data, abstract JuMP model for optimization, variable references and result from solving the JuMP model.\n\n\n\n\n\n","category":"type"},{"location":"function_references/#QuantumCircuitOpt.CCZGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.CCZGate","text":"CCZGate()\n\nThree-qubit controlled-controlled Z gate. \n\nCircuit Representation\n\nq_0: ─■─\n      │\nq_1: ─■─\n      │\nq_2: ─■─\n\nMatrix Representation\n\nCCZGate =\n            beginpmatrix\n            1  0  0  0  0  0  0  0 \n            0  1  0  0  0  0  0  0 \n            0  0  1  0  0  0  0  0 \n            0  0  0  1  0  0  0  0 \n            0  0  0  0  1  0  0  0 \n            0  0  0  0  0  1  0  0 \n            0  0  0  0  0  0  1  0 \n            0  0  0  0  0  0  0  -1 \n        endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.CHGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.CHGate","text":"CHGate()\n\nTwo-qubit, symmetric, controlled Hadamard gate (HGate). \n\nCircuit Representation\n\nq_0: ──■──\n     ┌─┴─┐  \nq_1: ┤ H ├    \n     └───┘\n\nMatrix Representation\n\nCH = 0ranglelangle 0 otimes I + 1ranglelangle 1 otimes H = beginpmatrix\n1  0  0  0 \n0  1  0  0 \n0  0  frac1sqrt2  frac1sqrt2 \n0  0  frac1sqrt2  -frac1sqrt2\nendpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.CHRevGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.CHRevGate","text":"CHRevGate()\n\nTwo-qubit reverse controlled-H gate, with target and control on first and second qubits, respectively. \n\nCircuit Representation\n\n     ┌───┐\nq_0: ┤ H ├\n     └─┬─┘\nq_1: ──■──\n\nMatrix Representation\n\nCHRev = I otimes 0ranglelangle 0 + H otimes 1ranglelangle 1 = beginpmatrix\n        1  0  0  0 \n        0  frac1sqrt2  0  frac1sqrt2 \n        0  0  1  0 \n        0  frac1sqrt2  0  -frac1sqrt2\n    endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.CNotGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.CNotGate","text":"CNotGate()\n\nTwo-qubit controlled NOT gate with control and target on first and second qubits, respectively. This is also  called the controlled X gate (CXGate). \n\nCircuit Representation\n\nq_0: ──■──\n     ┌─┴─┐\nq_1: ┤ X ├\n     └───┘\n\nMatrix Representation\n\nCNot = beginpmatrix\n    1  0  0  0 \n    0  1  0  0 \n    0  0  0  1 \n    0  0  1  0\n    endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.CNotRevGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.CNotRevGate","text":"CNotRevGate()\n\nTwo-qubit reverse controlled NOT gate, with target and control on first and second qubits, respectively. \n\nCircuit Representation\n\n     ┌───┐\nq_0: ┤ X ├\n     └─┬─┘\nq_1: ──■──\n\nMatrix Representation\n\nCNotRev = beginpmatrix\n            1  0  0  0 \n            0  0  0  1 \n            0  0  1  0 \n            0  1  0  0\n            endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.CRXGate-Tuple{Number}","page":"Function References","title":"QuantumCircuitOpt.CRXGate","text":"CRXGate(θ::Number)\n\nTwo-qubit controlled RXGate. \n\nCircuit Representation\n\nq_0: ────■────\n     ┌───┴───┐\nq_1: ┤ RX(ϴ) ├\n     └───────┘\n\nMatrix Representation\n\nnewcommandthfractheta2\n\nCRX(theta) q_1 q_0 =\n0ranglelangle0 otimes I + 1ranglelangle1 otimes RX(theta) =\n    beginpmatrix\n        1  0  0  0 \n        0  1  0  0 \n        0  0  costh    -isinth \n        0  0  -isinth  costh\n    endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.CRXRevGate-Tuple{Number}","page":"Function References","title":"QuantumCircuitOpt.CRXRevGate","text":"CRXRevGate(θ::Number)\n\nTwo-qubit controlled reverse RXGate. \n\nCircuit Representation\n\n     ┌───────┐\nq_1: ┤ RX(ϴ) ├\n     └───┬───┘\nq_0: ────■────\n\nMatrix Representation\n\nnewcommandthfractheta2\n\nCRXRev(theta) q_1 q_0 =\n0ranglelangle0 otimes I + 1ranglelangle1 otimes RX(theta) =\n    beginpmatrix\n        1  0  0  0 \n        0  costh  0  -isinth \n        0  0  1  0\n        0  -isinth  0  costh\n    endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.CRYGate-Tuple{Number}","page":"Function References","title":"QuantumCircuitOpt.CRYGate","text":"CRYGate(θ::Number)\n\nTwo-qubit controlled RYGate. \n\nCircuit Representation\n\nq_0: ────■────\n     ┌───┴───┐\nq_1: ┤ RY(ϴ) ├\n     └───────┘\n\nMatrix Representation\n\nnewcommandthfractheta2\n\nCRY(theta) q_1 q_0 =\n0ranglelangle0 otimes I + 1ranglelangle1 otimes RY(theta) =\n    beginpmatrix\n        1  0  0  0 \n        0  1  0  0 \n        0  0  costh    -sinth \n        0  0  sinth  costh\n    endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.CRYRevGate-Tuple{Number}","page":"Function References","title":"QuantumCircuitOpt.CRYRevGate","text":"CRYRevGate(θ::Number)\n\nTwo-qubit controlled reverse RYGate. \n\nCircuit Representation\n\n     ┌───────┐\nq_1: ┤ RY(ϴ) ├\n     └───┬───┘\nq_0: ────■────\n\nMatrix Representation\n\nnewcommandthfractheta2\n\nCRYRev(theta) q_1 q_0 =\n0ranglelangle0 otimes I + 1ranglelangle1 otimes RY(theta) =\n    beginpmatrix\n        1  0  0  0 \n        0  costh  0  -sinth \n        0  0  1  0 \n        0  sinth  0  costh\n    endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.CRZGate-Tuple{Number}","page":"Function References","title":"QuantumCircuitOpt.CRZGate","text":"CRZGate(θ::Number)\n\nTwo-qubit controlled RZGate. \n\nCircuit Representation\n\nq_0: ────■────\n     ┌───┴───┐\nq_1: ┤ RZ(ϴ) ├\n     └───────┘\n\nMatrix Representation\n\nnewcommandthfractheta2\n\nCRZ(theta) q_1 q_0 =\n0ranglelangle0 otimes I + 1ranglelangle1 otimes RZ(theta) =\n    beginpmatrix\n        1  0  0  0 \n        0  1  0  0 \n        0  0  e^-ith    0 \n        0  0  0  e^ith\n    endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.CRZRevGate-Tuple{Number}","page":"Function References","title":"QuantumCircuitOpt.CRZRevGate","text":"CRZRevGate(θ::Number)\n\nTwo-qubit controlled reverse RZGate. \n\nCircuit Representation\n\n     ┌───────┐\nq_1: ┤ RZ(ϴ) ├\n     └───┬───┘\nq_0: ────■────\n\nMatrix Representation\n\nnewcommandthfractheta2\n\nCRZRev(theta) q_1 q_0 =\n0ranglelangle0 otimes I + 1ranglelangle1 otimes RZ(theta) =\n    beginpmatrix\n        1  0  0  0 \n        0  e^-ith  0  0 \n        0  0  1   0 \n        0  0  0  e^ith\n    endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.CSXGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.CSXGate","text":"CSXGate()\n\nTwo-qubit controlled version of (SXGate). \n\nCircuit Representation\n\nq_0: ─────■─────\n     ┌────┴────┐\nq_1: ┤ sqrt(X) ├\n     └─────────┘\n\nMatrix Representation\n\nCSXGate = 0 ranglelangle 0 otimes I + 1 ranglelangle 1 otimes SX = beginpmatrix\n1  0  0  0 \n0  1  0  0 \n0  0  05+05i  05-05i \n0  0  05-05i  05+05i\n    endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.CSXRevGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.CSXRevGate","text":"CSXRevGate()\n\nTwo-qubit controlled version of the reverse (SXGate). \n\nCircuit Representation\n\n     ┌─────────┐\nq_1: ┤ sqrt(X) ├\n     └────┬────┘\nq_0: ─────■────\n\nMatrix Representation\n\nCSXRevGate = I otimes 0ranglelangle 0 + SX otimes 1ranglelangle 1 = beginpmatrix\n1  0  0  0 \n0  05+05i  0  05-05i \n0  0  1  0 \n0  05-05i  0  05+05i\n    endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.CSwapGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.CSwapGate","text":"CSwapGate()\n\nThree-qubit, controlled SwapGate, also known as the Fredkin gate.\n\nCircuit Representation\n\nq_0: ─■─\n      │\nq_1: ─X─\n      │\nq_2: ─X─\n\nMatrix Representation\n\nCSwapGate =\n            beginpmatrix\n            1  0  0  0  0  0  0  0 \n            0  1  0  0  0  0  0  0 \n            0  0  1  0  0  0  0  0 \n            0  0  0  1  0  0  0  0 \n            0  0  0  0  1  0  0  0 \n            0  0  0  0  0  0  1  0 \n            0  0  0  0  0  1  0  0 \n            0  0  0  0  0  0  0  1 \n        endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.CU3Gate-Tuple{Number, Number, Number}","page":"Function References","title":"QuantumCircuitOpt.CU3Gate","text":"CU3Gate(θ::Number, ϕ::Number, λ::Number)\n\nTwo-qubit, controlled version of the universal rotation gate with three Euler angles (U3Gate). \n\nCircuit Representation\n\nq_0: ──────■──────\n     ┌─────┴─────┐\nq_1: ┤ U3(ϴ,φ,λ) ├\n     └───────────┘\n\nMatrix Representation\n\nnewcommandthfractheta2\n\nCU3(theta phi lambda) q_1 q_0 =\n                0ranglelangle 0 otimes I +\n                1ranglelangle 1 otimes U3(thetaphilambda) =\n                beginpmatrix\n                    1  0    0                   0 \n                    0  1    0                   0 \n                    0  0    cos(th)           -e^ilambdasin(th) \n                    0  0    e^iphisin(th)  e^i(phi+lambda)cos(th)\n                endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.CU3RevGate-Tuple{Number, Number, Number}","page":"Function References","title":"QuantumCircuitOpt.CU3RevGate","text":"CU3RevGate(θ::Number, ϕ::Number, λ::Number)\n\nTwo-qubit, reverse controlled version of the universal rotation gate with three Euler angles (U3Gate). \n\nCircuit Representation\n\n     ┌────────────┐\nq_1: ┤  U3(ϴ,φ,λ) ├\n     └──────┬─────┘\nq_0: ───────■──────\n\nMatrix Representation\n\nnewcommandthfractheta2\n\nCU3(theta phi lambda) q_1 q_0 =\n                0ranglelangle 0 otimes I +\n                1ranglelangle 1 otimes U3(thetaphilambda) =\n                beginpmatrix\n                    1  0    0   0 \n                    0  cos(th)    0  -e^ilambdasin(th) \n                    0  0     1  0 \n                    0  e^iphisin(th)   0   e^i(phi+lambda)cos(th)\n                endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.CVGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.CVGate","text":"CVGate()\n\nTwo-qubit, controlled-V gate, which is also the same as Controlled square-root of X gate (CSXGate).  \n\nCircuit Representation\n\nq_0: ──■──     \n     ┌─┴─┐    \nq_1: ┤ V ├     \n     └───┘\n\nMatrix Representation\n\nCV = beginpmatrix\n        1  0  0  0 \n        0  1  0  0 \n        0  0  05+05i  05-05i \n        0  0  05-05i  05+05i\n    endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.CVRevGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.CVRevGate","text":"CVRevGate()\n\nTwo-qubit reverse controlled-V gate, with target and control on first and second qubits, respectively. \n\nCircuit Representation\n\n     ┌───┐\nq_0: ┤ V ├\n     └─┬─┘\nq_1: ──■──\n\nMatrix Representation\n\nCVRev = beginpmatrix\n        1  0  0  0 \n        0  05+05i  0  05-05i \n        0  0  1  0 \n        0  05-05i  0  05+05i\n    endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.CVdaggerGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.CVdaggerGate","text":"CVdaggerGate()\n\nTwo-qubit hermitian conjugate of controlled-V gate, which is also the same as hermitian conjugate Controlled square-root of X gate (CSXGate).  \n\nCircuit Representation\n\nq_0: ──■──     \n     ┌─┴─┐    \nq_1: ┤ V'├     \n     └───┘\n\nMatrix Representation\n\nCVdagger = beginpmatrix\n        1  0  0  0 \n        0  1  0  0 \n        0  0  05-05i  05+05i \n        0  0  05+05i  05-05i\n    endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.CVdaggerRevGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.CVdaggerRevGate","text":"CVdaggerRevGate()\n\nTwo-qubit hermitian conjugate of reverse controlled-V gate, with target and control on first and second qubits, respectively. \n\nCircuit Representation\n\n     ┌───┐\nq_0: ┤ V'├\n     └─┬─┘\nq_1: ──■──\n\nMatrix Representation\n\nCVdaggerRev = beginpmatrix\n        1  0  0  0 \n        0  05-05i  0  05+05i \n        0  0  1  0 \n        0  05+05i  0  05-05i\n    endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.CXGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.CXGate","text":"CXGate()\n\nTwo-qubit controlled XGate, which is also the same as CNotGate. \n\nCircuit Representation\n\nq_0: ──■──\n     ┌─┴─┐\nq_1: ┤ X ├\n     └───┘\n\nMatrix Representation\n\nCX = beginpmatrix\n    1  0  0  0 \n    0  1  0  0 \n    0  0  0  1 \n    0  0  1  0\n    endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.CXRevGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.CXRevGate","text":"CXRevGate()\n\nTwo-qubit reverse controlled-X gate, with target and control on first and second qubits, respectively.  This is also the same as CNotRevGate. \n\nCircuit Representation\n\n     ┌───┐\nq_0: ┤ X ├\n     └─┬─┘\nq_1: ──■──\n\nMatrix Representation\n\nCXRev = I otimes 0 ranglelangle 0 + X otimes 1 ranglelangle 1 = beginpmatrix\n        1  0  0  0 \n        0  0  0  1 \n        0  0  1  0 \n        0  1  0  0\n    endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.CYGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.CYGate","text":"CYGate()\n\nTwo-qubit controlled YGate. \n\nCircuit Representation\n\nq_0: ──■──\n     ┌─┴─┐\nq_1: ┤ Y ├\n     └───┘\n\nMatrix Representation\n\nCY = 0 ranglelangle 0 otimes I + 1 ranglelangle 1 otimes Y = beginpmatrix\n    1  0  0  0 \n    0  1  0  0 \n    0  0  0  -i \n    0  0  i  0\n    endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.CYRevGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.CYRevGate","text":"CYRevGate()\n\nTwo-qubit reverse controlled-Y gate, with target and control on first and second qubits, respectively. \n\nCircuit Representation\n\n     ┌───┐\nq_0: ┤ Y ├\n     └─┬─┘\nq_1: ──■──\n\nMatrix Representation\n\nCYRev = I otimes 0 ranglelangle 0 + Y otimes 1 ranglelangle 1 = beginpmatrix\n        1  0  0  0 \n        0  0  0  -i \n        0  0  1  0 \n        0  i  0  0\n    endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.CZGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.CZGate","text":"CZGate()\n\nTwo-qubit, symmetric, controlled ZGate. \n\nCircuit Representation\n\nq_0: ──■──     ─■─\n     ┌─┴─┐  ≡   │\nq_1: ┤ Z ├     ─■─\n     └───┘\n\nMatrix Representation\n\nCZ = 0 ranglelangle 0 otimes I + 1 ranglelangle 1 otimes Z = beginpmatrix\n    1  0  0  0 \n    0  1  0  0 \n    0  0  1  0 \n    0  0  0  -1\n    endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.CZRevGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.CZRevGate","text":"CZRevGate()\n\nTwo-qubit reverse controlled-Z gate, with target and control on first and second qubits, respectively. \n\nCircuit Representation\n\n     ┌───┐\nq_0: ┤ Z ├\n     └─┬─┘\nq_1: ──■──\n\nMatrix Representation\n\nCZRev = I otimes 0ranglelangle0 + Z otimes 1ranglelangle1 = beginpmatrix\n    1  0  0  0 \n    0  1  0  0 \n    0  0  1  0 \n    0  0  0  -1\n    endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.DCXGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.DCXGate","text":"DCXGate()\n\nTwo-qubit double controlled NOT gate consisting of two back-to-back CNotGates with alternate controls. \n\nCircuit Representation\n\n          ┌───┐\nq_0: ──■──┤ X ├\n     ┌─┴─┐└─┬─┘\nq_1: ┤ X ├──■──\n     └───┘\n\nMatrix Representation\n\nDCX = beginpmatrix\n    1  0  0  0 \n    0  0  0  1 \n    0  1  0  0 \n    0  0  1  0\n    endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.GroverDiffusionGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.GroverDiffusionGate","text":"GroverDiffusionGate()\n\nTwo-qubit, Grover's diffusion operator, a key building block of the Glover's algorithm used to find a specific item (with probability > 0.5) within a randomly ordered database of N items in O(sqrt(N)) operations.  Reference: https://arxiv.org/pdf/1804.03719.pdf\n\nMatrix Representation\n\nGroverDiffusionGate = frac12beginpmatrix\n1  -1  -1  -1 \n-1  1  -1  -1 \n-1  -1  1  -1  \n-1  -1  -1  1\nendpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.HCoinGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.HCoinGate","text":"HCoinGate()\n\nTwo-qubit, Hadamard Coin gate when implemented in tune with the quantum cellular automata.  Reference: https://doi.org/10.1007/s11128-018-1983-x, https://arxiv.org/pdf/2106.03115.pdf\n\nMatrix Representation\n\nHCoinGate = beginpmatrix\n1  0  0  0 \n0  frac1sqrt2  frac1sqrt2  0 \n0  frac1sqrt2  -frac1sqrt2  0 \n0  0  0  1\nendpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.HGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.HGate","text":"HGate(num_qubits::Int64)\n\nSingle-qubit Hadamard gate, which is a pi rotation about the X+Z axis, thus equivalent to U3Gate(fracpi20pi)\n\nMatrix Representation\n\nH = frac1sqrt2\n        beginpmatrix\n            1  1 \n            1  -1\n        endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.IGate-Tuple{Int64}","page":"Function References","title":"QuantumCircuitOpt.IGate","text":"IGate(num_qubits::Int64)\n\nIdentity matrix for an input number of qubits.\n\nMatrix Representation (num_qubits = 1)\n\nI = beginpmatrix\n        1  0 \n        0  1\n    endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.MGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.MGate","text":"MGate()\n\nTwo-qubit Magic gate, also known as the Ising coupling or the XX gate.\n\nReference: https://doi.org/10.1103/PhysRevA.69.032315\n\nCircuit Representation\n\n      ┌───┐        ┌───┐\nq_0: ─┤ X ├────────┤ S ├\n      └─┬─┘        └─┬─┘        \n        │   ┌───┐  ┌─┴─┐\nq_1: ───■───┤ H ├──┤ S ├\n            └───┘  └───┘\n\nMatrix Representation\n\nM = frac1sqrt2 beginpmatrix\n1  i  0  0 \n0  0  i  1 \n0  0  i  -1 \n1  -i  0  0\nendpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.PeresGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.PeresGate","text":"PeresGate()\n\nThree-qubit Peres gate. This gate is equivalent to ToffoliGate followed by the CNotGate in 3 qubits.  Reference: https://doi.org/10.1103/PhysRevA.32.3266\n\nCircuit Representation\n\nq_0: ──■─────■──          \n       │   ┌─┴─┐\nq_1: ──■───┤ X ├\n     ┌─┴─┐ └───┘\nq_2: ┤ X ├──────\n     └───┘\n\nMatrix Representation\n\nPeresGate =\n            beginpmatrix\n            1  0  0  0  0  0  0  0 \n            0  1  0  0  0  0  0  0 \n            0  0  1  0  0  0  0  0 \n            0  0  0  1  0  0  0  0 \n            0  0  0  0  0  0  1  0 \n            0  0  0  0  0  0  0  1 \n            0  0  0  0  0  1  0  0 \n            0  0  0  0  1  0  0  0 \n        endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.PhaseGate-Tuple{Number}","page":"Function References","title":"QuantumCircuitOpt.PhaseGate","text":"PhaseGate()\n\nSingle-qubit rotation gate about the Z axis. This is also equivalent to U3Gate(00lambda). This  gate is also referred to as the U1Gate. \n\nMatrix Representation\n\nP(lambda) = beginpmatrix\n    1  0 \n    0  e^ilambda\nendpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.QFT2Gate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.QFT2Gate","text":"QFT2Gate()\n\nTwo-qubit Quantum Fourier Transform (QFT) gate, where the QFT operation on n-qubits is given by: \n\njrangle mapsto frac12^n2 sum_k=0^2^n - 1 e^2pi ijk  2^n krangle\n\nCircuit Representation\n\n     ┌──────┐\nq_0: ┤      ├\n     │ QFT2 │   \nq_1: ┤      ├ \n     └──────┘ \n\nMatrix Representation\n\nM = frac12 beginpmatrix\n1  1  1  1 \n1  i  -1  -i \n1  -1  1  -1 \n1  -i  -1  i\nendpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.RXGate-Tuple{Number}","page":"Function References","title":"QuantumCircuitOpt.RXGate","text":"RXGate(θ::Number)\n\nA single-qubit Pauli gate which represents rotation about the X axis.\n\nMatrix Representation\n\nnewcommandthfractheta2\n\nRX(theta) = exp(-i th X) =\n    beginpmatrix\n        costh    -isinth \n        -isinth  costh\n    endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.RYGate-Tuple{Number}","page":"Function References","title":"QuantumCircuitOpt.RYGate","text":"RYGate(θ::Number)\n\nA single-qubit Pauli gate which represents rotation about the Y axis.\n\nMatrix Representation\n\nnewcommandthfractheta2\n\nRY(theta) = exp(-i th Y) =\n    beginpmatrix\n        costh  -sinth \n        sinth  costh\n    endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.RZGate-Tuple{Number}","page":"Function References","title":"QuantumCircuitOpt.RZGate","text":"RZGate(θ::Number)\n\nA single-qubit Pauli gate which represents rotation about the Z axis. This gate is also equivalent to U1Gate up to a phase factor,  that is, RZ(theta) = e^-itheta2U1(theta).\n\nMatrix Representation\n\nnewcommandthfractheta2\n\nRZ(theta) = exp(-ith Z) =\nbeginpmatrix\n    e^-ith  0 \n    0  e^ith\nendpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.SGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.SGate","text":"SGate()\n\nSingle-qubit S gate, equivalent to U3Gate(00fracpi2). This  gate is also referred to as a Clifford gate, P gate or a square-root of Pauli-ZGate. Historically, this is also  called as the phase gate (denoted by P), since it shifts the phase of the one state relative to the zero state.\n\nMatrix Representation\n\nS = beginpmatrix\n1  0 \n0  i\nendpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.SXGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.SXGate","text":"SXGate()\n\nSingle-qubit square root of pauli-XGate.\n\nMatrix Representation\n\nsqrtX = frac12 beginpmatrix\n1 + i  1 - i \n1 - i  1 + i\nendpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.SXdaggerGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.SXdaggerGate","text":"SXdaggerGate()\n\nSingle-qubit hermitian conjugate of the square root of pauli-XGate, or the SXGate.\n\nMatrix Representation\n\nsqrtX^dagger = frac12 beginpmatrix\n1 - i  1 + i \n1 + i  1 - i\nendpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.SdaggerGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.SdaggerGate","text":"SdaggerGate()\n\nSingle-qubit, hermitian conjugate of the SGate. This is also an alternative square root of  the ZGate. \n\nMatrix Representation\n\nS = beginpmatrix\n1  0 \n0  -i\nendpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.SwapGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.SwapGate","text":"SwapGate()\n\nTwo-qubit, symmetric, SWAP gate. \n\nCircuit Representation\n\nq_0: ─X─\n      │\nq_1: ─X─\n\nMatrix Representation\n\nSWAP = beginpmatrix\n1  0  0  0 \n0  0  1  0 \n0  1  0  0 \n0  0  0  1\nendpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.SycamoreGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.SycamoreGate","text":"SycamoreGate()\n\nTwo-qubit Sycamore Gate, native to Google's universal quantum processor. Reference: quantumai.google/cirq/google/devices\n\nCircuit Representation\n\n     ┌──────┐\nq_0: ┤      ├\n     │ SYC  │   \nq_1: ┤      ├ \n     └──────┘ \n\nMatrix Representation\n\n\nSycamoreGate() = beginpmatrix\n1  0  0  0 \n0  0  -i  0 \n0  -i  0  0  \n0  0  0  e^-i fracpi6\nendpmatrix\n\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.TGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.TGate","text":"TGate()\n\nSingle-qubit T gate, equivalent to U3Gate(00fracpi4). This  gate is also referred to as a fracpi8 gate or as a fourth-root of Pauli-ZGate. \n\nMatrix Representation\n\nT = beginpmatrix\n1  0 \n0  e^ipi4\nendpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.TdaggerGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.TdaggerGate","text":"TdaggerGate()\n\nSingle-qubit, hermitian conjugate of the TGate. This gate is equivalent to U3Gate(00-fracpi4). This  gate is also referred to as the fourth-root of Pauli-ZGate. \n\nMatrix Representation\n\nT^dagger = beginpmatrix\n1  0 \n0  e^-ipi4\nendpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.ToffoliGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.ToffoliGate","text":"ToffoliGate()\n\nThree-qubit Toffoli gate, also known as the CCX (controlled-controlled-NOT) gate. \n\nCircuit Representation\n\nq_0: ──■──\n       │\nq_1: ──■──\n     ┌─┴─┐\nq_2: ┤ X ├\n     └───┘\n\nMatrix Representation\n\nToffoli     =\n            0 rangle langle 0 otimes I otimes I + 1 rangle langle 1 otimes CXGate =\n            beginpmatrix\n                1  0  0  0  0  0  0  0\n                0  1  0  0  0  0  0  0\n                0  0  1  0  0  0  0  0\n                0  0  0  1  0  0  0  0\n                0  0  0  0  1  0  0  0\n                0  0  0  0  0  1  0  0\n                0  0  0  0  0  0  0  1\n                0  0  0  0  0  0  1  0\n            endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.U1Gate-Tuple{Number}","page":"Function References","title":"QuantumCircuitOpt.U1Gate","text":"U1Gate(λ::Number)\n\nUniversal single-qubit rotation gate with one Euler angle, lambda. U1Gate represents rotation about the Z axis and  is the special case of U3Gate, which also known as the PhaseGate. Also note that U1(pi) =ZGate, U1(pi2) =SGate and  U1(pi4) =TGate.\n\nMatrix Representation\n\nU1(lambda) =\nbeginpmatrix\n    1  0 \n    0  e^ilambda\nendpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.U2Gate-Tuple{Number, Number}","page":"Function References","title":"QuantumCircuitOpt.U2Gate","text":"U2Gate(ϕ::Number, λ::Number)\n\nUniversal single-qubit rotation gate with two Euler angles, phi and lambda. U2Gate is the special case of  U3Gate. \n\nMatrix Representation\n\nU2(phi lambda) = frac1sqrt2\nbeginpmatrix\n    1           -e^ilambda \n    e^iphi  e^i(phi+lambda)\nendpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.U3Gate-Tuple{Number, Number, Number}","page":"Function References","title":"QuantumCircuitOpt.U3Gate","text":"U3Gate(θ::Number, ϕ::Number, λ::Number)\n\nUniversal single-qubit rotation gate with three Euler angles, theta, phi and lambda.\n\nMatrix Representation\n\nnewcommandthfractheta2\n\nU3(theta phi lambda) =\n    beginpmatrix\n        cos(th)           -e^ilambdasin(th) \n        e^iphisin(th)  e^i(phi+lambda)cos(th)\n    endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.WGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.WGate","text":"WGate()\n\nTwo-qubit, W hermitian gate, typically useful to diagonlize the (SwapGate).  \n\nMatrix Representation\n\nW = beginpmatrix\n        1  0  0  0 \n        0  frac1sqrt2  frac1sqrt2  0 \n        0  frac1sqrt2  -frac1sqrt2  0 \n        0  0  0  1\n    endpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.XGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.XGate","text":"XGate()\n\nSingle-qubit Pauli-X gate (sigma_x), equivalent to U3Gate(pi0pi)\n\nMatrix Representation\n\nX = beginpmatrix\n0  1 \n1  0\nendpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.YGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.YGate","text":"YGate()\n\nSingle-qubit Pauli-Y gate (sigma_y), equivalent to U3Gate(pifracpi2fracpi2)\n\nMatrix Representation\n\nY = beginpmatrix\n0  -i \ni  0\nendpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.ZGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.ZGate","text":"ZGate()\n\nSingle-qubit Pauli-Z gate (sigma_z), equivalent to U3Gate(00pi)\n\nMatrix Representation\n\nZ = beginpmatrix\n1  0 \n0  -1\nendpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt._catch_input_gate_errors-Tuple{String, Vector{Int64}, Int64, String}","page":"Function References","title":"QuantumCircuitOpt._catch_input_gate_errors","text":"_catch_input_gate_errors(gate_type::String, qubit_loc::Vector{Int64}, num_qubits::Int64, input_gate::String)\n\nGiven an input gate string, number of qubits of the circuit and the qubit locations for the input gate,  this function catches and throws any errors, should the input gate type and qubits are invalid. \n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt._get_constraint_slope_intercept-Tuple{Tuple{Number, Number}, Tuple{Number, Number}}","page":"Function References","title":"QuantumCircuitOpt._get_constraint_slope_intercept","text":"_get_constraint_slope_intercept(vertex1::Vector{<:Number}, vertex2::Vector{<:Number})\n\nGiven co-ordinates of two points in a plane, this function returns the slope (m) and intercept (c) of the  line joining these two points. \n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt._lt_filter-Tuple{Tuple{Number, Number}, Tuple{Number, Number}}","page":"Function References","title":"QuantumCircuitOpt._lt_filter","text":"_lt_filter(a::Tuple{<:Number, <:Number}, b::Tuple{<:Number, <:Number})\n\nUtility function for sorting step in convex_hull. Given two points, a and b, this function  returns true if a has larger polar angle (counterclock-wise direction) than b w.r.t. first point chull_p1. \n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt._orientation-Tuple{Tuple{Number, Number}, Tuple{Number, Number}, Tuple{Number, Number}}","page":"Function References","title":"QuantumCircuitOpt._orientation","text":"_orientation(x::Tuple{<:Number, <:Number}, y::Tuple{<:Number, <:Number}, z::Tuple{<:Number, <:Number})\n\nUtility function for convex_hull. Given an ordered triplet, this function returns if three points are collinear, oriented in clock-wise or anticlock-wise direction. \n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt._parse_gate_string-Tuple{String}","page":"Function References","title":"QuantumCircuitOpt._parse_gate_string","text":"_parse_gate_string(s::String)\n\nGiven a string representing a single gate with qubit numbers separated by symbol _, this function parses and returns the vector of qubits on which the input gate is located. For example, if the input string is CRX_2_3, the output will be Vector{Int64}([2,3]).\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt._parse_gates_with_kron_symbol-Tuple{String}","page":"Function References","title":"QuantumCircuitOpt._parse_gates_with_kron_symbol","text":"_parse_gates_with_kron_symbol(s::String)\n\nGiven a string with gates separated by kronecker symbols (x), this function parses and returns the vector of gates. For  example, if the input string is H_1xCNot_2_3xT_4, the output will be Vector{String}([\"H_1\", \"CNot_2_3\", \"T_4\"]).\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.auxiliary_variable_bounds-Tuple{Vector{JuMP.VariableRef}}","page":"Function References","title":"QuantumCircuitOpt.auxiliary_variable_bounds","text":"auxiliary_variable_bounds(v::Array{JuMP.VariableRef,1})\n\nGiven a vector of JuMP variables (maximum 4 variables), this function returns the worst-case  bounds, the product of these input variables can admit.  \n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.build_QCModel_result-Tuple{QuantumCircuitModel, Number}","page":"Function References","title":"QuantumCircuitOpt.build_QCModel_result","text":"\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.complex_to_real_gate-Tuple{Matrix{ComplexF64}}","page":"Function References","title":"QuantumCircuitOpt.complex_to_real_gate","text":"complex_to_real_gate(M::Array{Complex{Float64},2})\n\nGiven a complex-valued two-dimensional quantum gate of size NxN, this function returns a real-valued gate  of dimensions 2Nx2N. \n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.convex_hull-Union{Tuple{Vector{T}}, Tuple{T}} where T<:Tuple{Number, Number}","page":"Function References","title":"QuantumCircuitOpt.convex_hull","text":"convex_hull(points::Vector{T}) where T<:Tuple{Number, Number}\n\nGraham's scan algorithm to compute the convex hull of a finite set of n points in a plane  with time complexity O(n*log(n)). Given a vector of tuples of co-ordinates, this function returns a  vector of tuples of co-ordinates which form the convex hull of the given set of points. \n\nSources: https://doi.org/10.1016/0020-0190(72)90045-2          https://en.wikipedia.org/wiki/Graham_scan \n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.eliminate_nonunique_gates-Tuple{Dict{String, Any}}","page":"Function References","title":"QuantumCircuitOpt.eliminate_nonunique_gates","text":"eliminate_nonunique_gates(gates_dict::Dict{String, Any})\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.gate_element_bounds-Tuple{Array{Float64, 3}}","page":"Function References","title":"QuantumCircuitOpt.gate_element_bounds","text":"gate_element_bounds(M::Array{Float64,3})\n\nGiven a set of elementary gates, {G1, G2, ... ,Gn}, this function evaluates  the range of every co-ordinate of the superimposed gates, over all possible gates.  \n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.get_commutative_gate_pairs-Tuple{Dict{String, Any}}","page":"Function References","title":"QuantumCircuitOpt.get_commutative_gate_pairs","text":"get_commutative_gate_pairs(M::Dict{String,Any}; identity_in_pairs = true)\n\nGiven a dictionary of elementary quantum gates, this function returns all pairs of commuting  gates. Optional argument, identity_pairs can be set to false if identity matrix need not be part of the commuting pairs. \n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.get_compressed_decomposition-Tuple{Int64, Vector{String}}","page":"Function References","title":"QuantumCircuitOpt.get_compressed_decomposition","text":"get_compressed_decomposition(num_qubits::Int64, gates_sol::Array{String,1})\n\nGiven the number of qubits and the sequence of gates from the solution, this function returns a  decomposition of gates after compressing adjacent pair of gates represented on two separate qubits.  For example, gates H1 and H2 appearing in a sequence will be compressed to H1xH2 (kron(H1,H2)).  This functionality is currently supported only for two qubit circuits and gates without angle parameters. \n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.get_data-Tuple{Dict{String, Any}}","page":"Function References","title":"QuantumCircuitOpt.get_data","text":"get_data(params::Dict{String, Any}; eliminate_identical_gates = true)\n\nGiven the user input params dictionary, this function returns a dictionary of processed data which contains all the  necessary information to formulate the optimization model for the circuit design problem. \n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.get_full_sized_gate-Tuple{String, Int64}","page":"Function References","title":"QuantumCircuitOpt.get_full_sized_gate","text":"get_full_sized_gate(input::String, num_qubits::Int64; angle = nothing)\n\nGiven an input string representing the gate and number of qubits of the circuit, this function returns a full-sized  gate with respect to the input number of qubits. For example, if num_qubits = 3 and the input gate in H_3  (Hadamard on third qubit), then this function returns IGate ⨷ IGate ⨷ HGate, where IGate and HGate are single qubit Identity and Hadamard gates, respectively.   Note that angle vector is an optional input which is necessary when the input gate is parametrized by Euler angles. \n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.get_full_sized_kron_symbol_gate-Tuple{String, Int64}","page":"Function References","title":"QuantumCircuitOpt.get_full_sized_kron_symbol_gate","text":"get_full_sized_kron_symbol_gate(input::String, num_qubits::Int64)\n\nGiven an input string with kronecker symbols representing the gate and number of qubits of the circuit, this function returns a full-sized  gate with respect to the input number of qubits. For example, if num_qubits = 3 and the input gate in I_1xT_1xH_3,  then this function returns IGate ⨷ TGate ⨷ HGate, where IGate, TGate and HGate are single-qubit Identity, T and Hadamard gates, respectively.   Note that this function currently does not support an input gate parametrized with Euler angles. \n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.get_idempotent_gates-Tuple{Dict{String, Any}}","page":"Function References","title":"QuantumCircuitOpt.get_idempotent_gates","text":"get_idempotent_gates(M::Dict{String,Any})\n\nGiven the dictionary of complex quantum gates, this function returns the indices of matrices which are self-idempotent  or idempotent with other set of input gates, excluding the Identity gate.\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.get_input_circuit_dict-Tuple{Vector{Tuple{Int64, String}}, Dict{String, Any}}","page":"Function References","title":"QuantumCircuitOpt.get_input_circuit_dict","text":"get_input_circuit_dict(input_circuit::Vector{Tuple{Int64,String}}, params::Dict{String,Any})\n\nGiven the user input circuit which serves as a warm-start to the optimization model, and user input params dictionary,  this function outputs the post-processed dictionary of the input circuit which is used by the optimization model. \n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.get_involutory_gates-Tuple{Dict{String, Any}}","page":"Function References","title":"QuantumCircuitOpt.get_involutory_gates","text":"get_involutory_gates(M::Dict{String,Any})\n\nGiven the dictionary of complex gates G_1, G_2, ..., G_n, this function returns the indices of these gates  which are involutory, i.e, G_i^2 = Identity, excluding the Identity gate. \n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.get_objective_bound-Tuple{JuMP.Model}","page":"Function References","title":"QuantumCircuitOpt.get_objective_bound","text":"\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.get_objective_value-Tuple{JuMP.Model}","page":"Function References","title":"QuantumCircuitOpt.get_objective_value","text":"\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.get_redundant_gate_product_pairs-Tuple{Dict{String, Any}}","page":"Function References","title":"QuantumCircuitOpt.get_redundant_gate_product_pairs","text":"get_redundant_gate_product_pairs(M::Dict{String,Any})\n\nGiven a dictionary of elementary quantum gates, this function returns all pairs of gates whose product is  one of the input elementary gates. For example, let G_basis = {G1, G2, G3} be the elementary gates. If G1*G2 ∈ G_basis,  then (1,2) is considered as a redundant pair. \n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.get_target_gate-Tuple{Dict{String, Any}, Bool}","page":"Function References","title":"QuantumCircuitOpt.get_target_gate","text":"get_target_gate(params::Dict{String, Any}, are_elementary_gates_real::Bool)\n\nGiven the user input params dictionary and a boolean if all the input elementary gates are real,  this function returns the corresponding real version of the target gate. \n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.iSwapGate-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.iSwapGate","text":"iSwapGate()\n\nTwo-qubit, symmetric and clifford, iSWAP gate.\n\nCircuit Representation\n\nq_0: ─⨂─\n      │     \nq_1: ─⨂─    \n\nMinimum depth representation\n\n      ┌───┐     ┌───┐ ┌───┐\nq_0: ─┤ X ├──■──┤ S ├─┤ X ├─\n      └─┬─┘┌─┴─┐└───┘ └─┬─┘\nq_1: ───■──┤ X ├────────■──\n           └───┘\n\nMatrix Representation\n\niSWAP = beginpmatrix\n1  0  0  0 \n0  0  i  0 \n0  i  0  0 \n0  0  0  1\nendpmatrix\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.is_gate_real-Tuple{Matrix{ComplexF64}}","page":"Function References","title":"QuantumCircuitOpt.is_gate_real","text":"is_gate_real(M::Array{Complex{Float64},2})\n\nGiven a complex-valued quantum gate, M, this function returns if M has purely real parts or not as it's elements. \n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.is_multi_qubit_gate-Tuple{String}","page":"Function References","title":"QuantumCircuitOpt.is_multi_qubit_gate","text":"is_multi_qubit_gate(gate::String)\n\nGiven the input gate string, this function returns a boolean if the input gate is a multi qubit gate or not.  For example, for a 2-qubit gate CRZ_1_2, output is true. \n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.kron_single_qubit_gate-Tuple{Int64, Matrix{ComplexF64}, String}","page":"Function References","title":"QuantumCircuitOpt.kron_single_qubit_gate","text":"kron_single_qubit_gate(num_qubits::Int64, M::Array{Complex{Float64},2}, qubit_loc::String)\n\nGiven number of qubits of the circuit, the complex-valued one-qubit gate and the qubit location (\"q1\",\"q2',\"q3\",...), this function returns a full-sized gate after applying appropriate kronecker products. This function supports any number  integer-valued qubits.  \n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.kron_two_qubit_gate-Tuple{Int64, Matrix{ComplexF64}, String, String}","page":"Function References","title":"QuantumCircuitOpt.kron_two_qubit_gate","text":"kron_two_qubit_gate(num_qubits::Int64, M::Array{Complex{Float64},2}, c_qubit_loc::String, t_qubit_loc::String)\n\nGiven number of qubits of the circuit, the complex-valued two-qubit gate and the control and target qubit locations (\"q1\",\"q2',\"q3\",...), this function returns a full-sized gate after applying appropriate kronecker products. This function supports any number integer-valued qubits.  \n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.logger_config!-Tuple{Any}","page":"Function References","title":"QuantumCircuitOpt.logger_config!","text":"allows the user to set the logging level without the need to add Memento\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.optimize_QCModel!-Tuple{QuantumCircuitModel}","page":"Function References","title":"QuantumCircuitOpt.optimize_QCModel!","text":"\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.real_to_complex_gate-Tuple{Matrix{Float64}}","page":"Function References","title":"QuantumCircuitOpt.real_to_complex_gate","text":"real_to_complex_gate(M::Array{Complex{Float64},2})\n\nGiven a real-valued two-dimensional quantum gate of size 2Nx2N, this function returns a complex-valued gate  of size NxN, if the input gate is in a valid complex form. \n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.relaxation_bilinear-Tuple{JuMP.Model, JuMP.VariableRef, JuMP.VariableRef, JuMP.VariableRef}","page":"Function References","title":"QuantumCircuitOpt.relaxation_bilinear","text":"relaxation_bilinear(m::JuMP.Model, xy::JuMP.VariableRef, x::JuMP.VariableRef, y::JuMP.VariableRef)\n\ngeneral relaxation of binlinear term (McCormick), which can be used to obtain specific variants in partiuclar cases of variables (like binary)\n\nz >= JuMP.lower_bound(x)*y + JuMP.lower_bound(y)*x - JuMP.lower_bound(x)*JuMP.lower_bound(y)\nz >= JuMP.upper_bound(x)*y + JuMP.upper_bound(y)*x - JuMP.upper_bound(x)*JuMP.upper_bound(y)\nz <= JuMP.lower_bound(x)*y + JuMP.upper_bound(y)*x - JuMP.lower_bound(x)*JuMP.upper_bound(y)\nz <= JuMP.upper_bound(x)*y + JuMP.lower_bound(y)*x - JuMP.upper_bound(x)*JuMP.lower_bound(y)\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.round_complex_values-Tuple{Matrix{ComplexF64}}","page":"Function References","title":"QuantumCircuitOpt.round_complex_values","text":"round_complex_values(M::Array{Complex{Float64},2})\n\nGiven a complex-valued gate, this function returns a complex-valued gate which  rounds the values closest to 0 and 1. This is useful to avoid numerical issues. \n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.round_real_value-Tuple{T} where T<:Number","page":"Function References","title":"QuantumCircuitOpt.round_real_value","text":"round_real_value(x::T) where T <: Number\n\nGiven a real-valued number, this function returns a real-value which rounds the values closest to 0 and 1. \n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.silence-Tuple{}","page":"Function References","title":"QuantumCircuitOpt.silence","text":"Suppresses information and warning messages output by QuantumCircuitOpt, for fine grained control use of the Memento package\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.unique_idx-Union{Tuple{AbstractArray{T, N} where N}, Tuple{T}} where T","page":"Function References","title":"QuantumCircuitOpt.unique_idx","text":"unique_idx(x::AbstractArray{T})\n\nThis function returns the indices of unique elements in a given array of scalar or vector inputs. Overall,  this function computes faster than Julia's built-in findfirst command. \n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.unique_matrices-Tuple{Array{Float64, 3}}","page":"Function References","title":"QuantumCircuitOpt.unique_matrices","text":"unique_matrices(M::Array{Float64, 3})\n\nThis function returns the unique set of matrices and the corresponding indices  of unique matrices from the given set of matrices.  \n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.validate_circuit_decomposition-Tuple{Dict{String, Any}, Vector{Int64}}","page":"Function References","title":"QuantumCircuitOpt.validate_circuit_decomposition","text":"validate_circuit_decomposition(data::Dict{String, Any}, id_sequence::Array{Int64,1})\n\nThis function validates the circuit decomposition if it is indeed exact with respect to the specified target gate. \n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.variable_domain-Tuple{JuMP.VariableRef}","page":"Function References","title":"QuantumCircuitOpt.variable_domain","text":"variable_domain(var::JuMP.VariableRef)\n\nComputes the valid domain of a given JuMP variable taking into account bounds and the varaible's implicit bounds (e.g. binary).\n\n\n\n\n\n","category":"method"},{"location":"function_references/#QuantumCircuitOpt.visualize_solution-Tuple{Dict{String, Any}, Dict{String, Any}}","page":"Function References","title":"QuantumCircuitOpt.visualize_solution","text":"visualize_solution(results::Dict{String, Any}, data::Dict{String, Any}; gate_sequence = false)\n\nGiven dictionaries of results and data, and assuming that the optimization model had a feasible solution,  this function aids in visualizing the optimal circuit decomposition.\n\n\n\n\n\n","category":"method"},{"location":"quickguide/#Quick-Start-Guide","page":"Quick Start guide","title":"Quick Start Guide","text":"","category":"section"},{"location":"quickguide/#Getting-started","page":"Quick Start guide","title":"Getting started","text":"","category":"section"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"To get started, install QuantumCircuitOpt and JuMP, a modeling language layer for optimization. QuantumCircuitOpt also needs a MIP solver such as CPLEX or Gurobi. If you prefer an open-source MIP solver, install CBC or GLPK from the Julia package manager, though be warned that the run times of QuantumCircuitOpt can be substantially slower using these open-source MIP solvers. ","category":"page"},{"location":"quickguide/#User-inputs","page":"Quick Start guide","title":"User inputs","text":"","category":"section"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"Necessary Inputs Description\nnum_qubits Number of qubits of the circuit (≥ 2).\nmaximum_depth Maximum allowable depth for decomposition of the circuit (≥ 2)\nelementary_gates Vector of all one and two qubit elementary gates. The menagerie of quantum gates currently supported in QuantumCircuitOpt can be found in gates.jl.\ntarget_gate Target unitary gate which you wish to decompose using the above-mentioned elementary_gates.\nRX_discretization Vector of discretization angles (in radians) for RXGate, if this gate is part of the above-mentioned elementary_gates.\nRY_discretization Vector of discretization angles (in radians) for RYGate, if this gate is part of the above-mentioned elementary_gates.\nRZ_discretization Vector of discretization angles (in radians) for RZGate, if this gate is part of the above-mentioned elementary_gates.\nPhase_discretization Vector of discretization angles (in radians) for PhaseGate, if this gate is part of the above-mentioned elementary_gates.\nU3_θ_discretization Vector of discretization angles (in radians) for θ parameter in U3Gate, if this gate is part of the above-mentioned elementary_gates.\nU3_ϕ_discretization Vector of discretization angles (in radians) for ϕ parameter in U3Gate, if this gate is part of the above-mentioned elementary_gates.\nU3_λ_discretization Vector of discretization angles (in radians) for λ parameter in U3Gate, if this gate is part of the above-mentioned elementary_gates.\nCRX_discretization Vector of discretization angles (in radians) for CRXGate, if this gate is part of the above-mentioned elementary_gates.\nCRY_discretization Vector of discretization angles (in radians) for CRYGate, if this gate is part of the above-mentioned elementary_gates.\nCRZ_discretization Vector of discretization angles (in radians) for CRZGate, if this gate is part of the above-mentioned elementary_gates.\nCU3_θ_discretization Vector of discretization angles (in radians) for θ parameter in CU3Gate, if this gate is part of the above-mentioned elementary_gates.\nCU3_ϕ_discretization Vector of discretization angles (in radians) for ϕ parameter in CU3Gate, if this gate is part of the above-mentioned elementary_gates.\nCU3_λ_discretization Vector of discretization angles (in radians) for λ parameter in CU3Gate, if this gate is part of the above-mentioned elementary_gates.\nobjective Choose one of the following: (a) \"minimize_depth\", which minimizes the total depth of decomposition. For this option, include \"Identity\" matrix in the above-mentioned elementary_gates, (b) \"minimize_cnot\", which minimizes the number of CNOT gates in the decomposition.\ndecomposition_type Choose one of the following: (a) \"exact\", which finds an exact decomposition if it exists, (b) \"approximate\", which finds an approximate decomposition if an exact one does not exist; otherwise it will return an exact solution.\noptimizer Mixed-integer programming (MIP) optimizer. For various MIP solver options, check solver.jl.","category":"page"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"Optional Inputs Description\ninitial_gate Intitial-condition gate to the decomposition (gate at 0th depth) (default: \"Identity\").\nset_cnot_lower_bound This option sets a lower bound on the total number of CNot or CX gates which an optimal decomposition can admit.\nset_cnot_upper_bound This option sets an upper bound on the total number of CNot/CX gates which an optimal decomposition can admit. Note that both set_cnot_lower_bound and set_cnot_upper_bound can also be set to an identitcal value to fix the number of CNot/CX gates in the optimal decomposition.\nidentify_real_gates This option identifies if all the elementary and target gates have only real entries and formulates a compact MIP formulation accordingly (default: false).\ninput_circuit Input circuit representing an ensemble of elementary gates which decomposes the given target gate. This input circuit, which serves as a warm-start, can accelerate the MIP solver's search for the incumbent solution. (default: empty circuit).\nrelax_integrality This option transforms integer variables into continuous variables (default: false).\noptimizer_presolve This option enables or disables the presolve option in the chosen optimizer (default: true). Turning it off can lead to slower run times.\noptimizer_log This option enables or disables console logging for the optimizer (default: true).\nslack_penalty This option allows the user to set the penalty for minimizing the slack term in the objective, when decomposition_type is set to \"approximate\" (default: 1E3).\ntime_limit This option allows the user to set the maximum time limit for the optimizer in seconds (default: 10,800).","category":"page"},{"location":"quickguide/#Sample-circuit-synthesis","page":"Quick Start guide","title":"Sample circuit synthesis","text":"","category":"section"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"Using some of the above-described user input options, here is a sample optimization model to minimize the total depth of the decomposition for a 2-qubit controlled-Z gate. With entangling CNOT gate and the universal rotation gate with three discretized Euler angles, (θ,ϕ,λ), here is the sample code:","category":"page"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"import QuantumCircuitOpt as QCO\nusing JuMP\nusing Gurobi\n\n# Target: CZGate\nfunction target_gate()\n    return Array{Complex{Float64},2}([1 0 0 0; 0 1 0 0; 0 0 1 0; 0 0 0 -1]) \nend\n\nparams = Dict{String, Any}(\n\"num_qubits\" => 2, \n\"maximum_depth\" => 4,    \n\"elementary_gates\" => [\"U3_2\", \"CNot_1_2\", \"Identity\"], \n\"target_gate\" => target_gate(),\n       \n\"U3_θ_discretization\" => -π/2:π/2:π/2,\n\"U3_ϕ_discretization\" => -π/2:π/2:π/2,\n\"U3_λ_discretization\" => -π/2:π/2:π/2,\n\n\"objective\" => \"minimize_depth\"\n)\n\nqcm_optimizer = JuMP.optimizer_with_attributes(Gurobi.Optimizer) \nQCO.run_QCModel(params, qcm_optimizer)","category":"page"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"If you prefer to decompose a target gate of your choice, update the target_gate() function and the  set of elementary_gates accordingly in the above sample code. For more such 2-qubit and 3-qubit gate decompositions, with and without the universal unitary in the elementary gates, refer to \"examples\" folder. ","category":"page"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"warning: Warning\nNote that QuantumCircuitOpt.jl tries to find the global minima of a specified objective function for a given set of input one- and two-qubit gates, target gate and the total depth of the decomposition. This combinatiorial optimization problem is known to be NP-hard to compute. Hence, unlike local optimization methods, such as machine learning, in the literature, the run times for larger number of qubits and depths can be prohibitively slow.","category":"page"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"tip: Tip\nRun times of QuantumCircuitOpt's mathematical formulations are significantly lower using Gurobi as the mixed-integer programming (MIP) solver. Note that this solver's individual usage license is available free for academic purposes. ","category":"page"},{"location":"quickguide/#Extracting-results","page":"Quick Start guide","title":"Extracting results","text":"","category":"section"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"The run commands (for example, run_QCModel) in QuantumCircuitOpt return detailed results in the form of a dictionary. This dictionary can be saved for further processing as follows,","category":"page"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"results = QCO.run_QCModel(params, qcm_optimizer)","category":"page"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"For example, for decomposing the above controlled-Z gate, the QuantumCircuitOpt's runtime and the optimal objective value (minimum depth) can be accessed using,","category":"page"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"results[\"solve_time\"]\nresults[\"objective\"]","category":"page"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"Also, results[\"solution\"] contains detailed information about the solution produced by the optimization model, which can be utilized for further analysis. ","category":"page"},{"location":"quickguide/#Visualizing-results","page":"Quick Start guide","title":"Visualizing results","text":"","category":"section"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"QuantumCircuitOpt currently supports the visualization of optimal circuit decompositions obtained from the results dictionary (from above), which can be executed using,","category":"page"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"data = QCO.get_data(params)\nQCO.visualize_solution(results, data)","category":"page"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"For example, for the above controlled-Z gate decomposition, the processed output of QuantumCircuitOpt is as follows: ","category":"page"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"=============================================================================\nQuantum Circuit Model Data\n\n  Number of qubits: 2\n  Total number of elementary gates (including discretization): 19\n  Maximum depth of decomposition: 4\n  Input elementary gates: [\"U3_1\", \"U3_2\", \"CNot_1_2\", \"Identity\"]\n    U3 - θ discretization: [-90.0, 0.0, 90.0]\n    U3 - ϕ discretization: [-90.0, 0.0, 90.0]\n    U3 - λ discretization: [-90.0, 0.0, 90.0]\n  Type of decomposition: exact\n\nOptimal Circuit Decomposition\n\n  U3_2(-90.0,0.0,0.0) * CNot_12 * U3_2(90.0,0.0,0.0) = Target gate\n  Minimum optimal depth: 3\n  Optimizer run time: 1.74 sec.\n=============================================================================","category":"page"},{"location":"1_qubit_gates/#Quantum-Circuits-Library:-Single-qubit-gates","page":"1-qubit gates","title":"Quantum Circuits Library: Single-qubit gates","text":"","category":"section"},{"location":"1_qubit_gates/","page":"1-qubit gates","title":"1-qubit gates","text":"CurrentModule = QuantumCircuitOpt","category":"page"},{"location":"1_qubit_gates/#IGate","page":"1-qubit gates","title":"IGate","text":"","category":"section"},{"location":"1_qubit_gates/","page":"1-qubit gates","title":"1-qubit gates","text":"IGate","category":"page"},{"location":"1_qubit_gates/#QuantumCircuitOpt.IGate","page":"1-qubit gates","title":"QuantumCircuitOpt.IGate","text":"IGate(num_qubits::Int64)\n\nIdentity matrix for an input number of qubits.\n\nMatrix Representation (num_qubits = 1)\n\nI = beginpmatrix\n        1  0 \n        0  1\n    endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"1_qubit_gates/#U3Gate","page":"1-qubit gates","title":"U3Gate","text":"","category":"section"},{"location":"1_qubit_gates/","page":"1-qubit gates","title":"1-qubit gates","text":"U3Gate","category":"page"},{"location":"1_qubit_gates/#QuantumCircuitOpt.U3Gate","page":"1-qubit gates","title":"QuantumCircuitOpt.U3Gate","text":"U3Gate(θ::Number, ϕ::Number, λ::Number)\n\nUniversal single-qubit rotation gate with three Euler angles, theta, phi and lambda.\n\nMatrix Representation\n\nnewcommandthfractheta2\n\nU3(theta phi lambda) =\n    beginpmatrix\n        cos(th)           -e^ilambdasin(th) \n        e^iphisin(th)  e^i(phi+lambda)cos(th)\n    endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"1_qubit_gates/#U2Gate","page":"1-qubit gates","title":"U2Gate","text":"","category":"section"},{"location":"1_qubit_gates/","page":"1-qubit gates","title":"1-qubit gates","text":"U2Gate","category":"page"},{"location":"1_qubit_gates/#QuantumCircuitOpt.U2Gate","page":"1-qubit gates","title":"QuantumCircuitOpt.U2Gate","text":"U2Gate(ϕ::Number, λ::Number)\n\nUniversal single-qubit rotation gate with two Euler angles, phi and lambda. U2Gate is the special case of  U3Gate. \n\nMatrix Representation\n\nU2(phi lambda) = frac1sqrt2\nbeginpmatrix\n    1           -e^ilambda \n    e^iphi  e^i(phi+lambda)\nendpmatrix\n\n\n\n\n\n","category":"function"},{"location":"1_qubit_gates/#U1Gate","page":"1-qubit gates","title":"U1Gate","text":"","category":"section"},{"location":"1_qubit_gates/","page":"1-qubit gates","title":"1-qubit gates","text":"U1Gate","category":"page"},{"location":"1_qubit_gates/#QuantumCircuitOpt.U1Gate","page":"1-qubit gates","title":"QuantumCircuitOpt.U1Gate","text":"U1Gate(λ::Number)\n\nUniversal single-qubit rotation gate with one Euler angle, lambda. U1Gate represents rotation about the Z axis and  is the special case of U3Gate, which also known as the PhaseGate. Also note that U1(pi) =ZGate, U1(pi2) =SGate and  U1(pi4) =TGate.\n\nMatrix Representation\n\nU1(lambda) =\nbeginpmatrix\n    1  0 \n    0  e^ilambda\nendpmatrix\n\n\n\n\n\n","category":"function"},{"location":"1_qubit_gates/#RXGate","page":"1-qubit gates","title":"RXGate","text":"","category":"section"},{"location":"1_qubit_gates/","page":"1-qubit gates","title":"1-qubit gates","text":"RXGate","category":"page"},{"location":"1_qubit_gates/#QuantumCircuitOpt.RXGate","page":"1-qubit gates","title":"QuantumCircuitOpt.RXGate","text":"RXGate(θ::Number)\n\nA single-qubit Pauli gate which represents rotation about the X axis.\n\nMatrix Representation\n\nnewcommandthfractheta2\n\nRX(theta) = exp(-i th X) =\n    beginpmatrix\n        costh    -isinth \n        -isinth  costh\n    endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"1_qubit_gates/#RYGate","page":"1-qubit gates","title":"RYGate","text":"","category":"section"},{"location":"1_qubit_gates/","page":"1-qubit gates","title":"1-qubit gates","text":"RYGate","category":"page"},{"location":"1_qubit_gates/#QuantumCircuitOpt.RYGate","page":"1-qubit gates","title":"QuantumCircuitOpt.RYGate","text":"RYGate(θ::Number)\n\nA single-qubit Pauli gate which represents rotation about the Y axis.\n\nMatrix Representation\n\nnewcommandthfractheta2\n\nRY(theta) = exp(-i th Y) =\n    beginpmatrix\n        costh  -sinth \n        sinth  costh\n    endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"1_qubit_gates/#RZGate","page":"1-qubit gates","title":"RZGate","text":"","category":"section"},{"location":"1_qubit_gates/","page":"1-qubit gates","title":"1-qubit gates","text":"RZGate","category":"page"},{"location":"1_qubit_gates/#QuantumCircuitOpt.RZGate","page":"1-qubit gates","title":"QuantumCircuitOpt.RZGate","text":"RZGate(θ::Number)\n\nA single-qubit Pauli gate which represents rotation about the Z axis. This gate is also equivalent to U1Gate up to a phase factor,  that is, RZ(theta) = e^-itheta2U1(theta).\n\nMatrix Representation\n\nnewcommandthfractheta2\n\nRZ(theta) = exp(-ith Z) =\nbeginpmatrix\n    e^-ith  0 \n    0  e^ith\nendpmatrix\n\n\n\n\n\n","category":"function"},{"location":"1_qubit_gates/#HGate","page":"1-qubit gates","title":"HGate","text":"","category":"section"},{"location":"1_qubit_gates/","page":"1-qubit gates","title":"1-qubit gates","text":"HGate","category":"page"},{"location":"1_qubit_gates/#QuantumCircuitOpt.HGate","page":"1-qubit gates","title":"QuantumCircuitOpt.HGate","text":"HGate(num_qubits::Int64)\n\nSingle-qubit Hadamard gate, which is a pi rotation about the X+Z axis, thus equivalent to U3Gate(fracpi20pi)\n\nMatrix Representation\n\nH = frac1sqrt2\n        beginpmatrix\n            1  1 \n            1  -1\n        endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"1_qubit_gates/#XGate","page":"1-qubit gates","title":"XGate","text":"","category":"section"},{"location":"1_qubit_gates/","page":"1-qubit gates","title":"1-qubit gates","text":"XGate","category":"page"},{"location":"1_qubit_gates/#QuantumCircuitOpt.XGate","page":"1-qubit gates","title":"QuantumCircuitOpt.XGate","text":"XGate()\n\nSingle-qubit Pauli-X gate (sigma_x), equivalent to U3Gate(pi0pi)\n\nMatrix Representation\n\nX = beginpmatrix\n0  1 \n1  0\nendpmatrix\n\n\n\n\n\n","category":"function"},{"location":"1_qubit_gates/#YGate","page":"1-qubit gates","title":"YGate","text":"","category":"section"},{"location":"1_qubit_gates/","page":"1-qubit gates","title":"1-qubit gates","text":"YGate","category":"page"},{"location":"1_qubit_gates/#QuantumCircuitOpt.YGate","page":"1-qubit gates","title":"QuantumCircuitOpt.YGate","text":"YGate()\n\nSingle-qubit Pauli-Y gate (sigma_y), equivalent to U3Gate(pifracpi2fracpi2)\n\nMatrix Representation\n\nY = beginpmatrix\n0  -i \ni  0\nendpmatrix\n\n\n\n\n\n","category":"function"},{"location":"1_qubit_gates/#ZGate","page":"1-qubit gates","title":"ZGate","text":"","category":"section"},{"location":"1_qubit_gates/","page":"1-qubit gates","title":"1-qubit gates","text":"ZGate","category":"page"},{"location":"1_qubit_gates/#QuantumCircuitOpt.ZGate","page":"1-qubit gates","title":"QuantumCircuitOpt.ZGate","text":"ZGate()\n\nSingle-qubit Pauli-Z gate (sigma_z), equivalent to U3Gate(00pi)\n\nMatrix Representation\n\nZ = beginpmatrix\n1  0 \n0  -1\nendpmatrix\n\n\n\n\n\n","category":"function"},{"location":"1_qubit_gates/#SGate","page":"1-qubit gates","title":"SGate","text":"","category":"section"},{"location":"1_qubit_gates/","page":"1-qubit gates","title":"1-qubit gates","text":"SGate","category":"page"},{"location":"1_qubit_gates/#QuantumCircuitOpt.SGate","page":"1-qubit gates","title":"QuantumCircuitOpt.SGate","text":"SGate()\n\nSingle-qubit S gate, equivalent to U3Gate(00fracpi2). This  gate is also referred to as a Clifford gate, P gate or a square-root of Pauli-ZGate. Historically, this is also  called as the phase gate (denoted by P), since it shifts the phase of the one state relative to the zero state.\n\nMatrix Representation\n\nS = beginpmatrix\n1  0 \n0  i\nendpmatrix\n\n\n\n\n\n","category":"function"},{"location":"1_qubit_gates/#SdaggerGate","page":"1-qubit gates","title":"SdaggerGate","text":"","category":"section"},{"location":"1_qubit_gates/","page":"1-qubit gates","title":"1-qubit gates","text":"SdaggerGate","category":"page"},{"location":"1_qubit_gates/#QuantumCircuitOpt.SdaggerGate","page":"1-qubit gates","title":"QuantumCircuitOpt.SdaggerGate","text":"SdaggerGate()\n\nSingle-qubit, hermitian conjugate of the SGate. This is also an alternative square root of  the ZGate. \n\nMatrix Representation\n\nS = beginpmatrix\n1  0 \n0  -i\nendpmatrix\n\n\n\n\n\n","category":"function"},{"location":"1_qubit_gates/#TGate","page":"1-qubit gates","title":"TGate","text":"","category":"section"},{"location":"1_qubit_gates/","page":"1-qubit gates","title":"1-qubit gates","text":"TGate","category":"page"},{"location":"1_qubit_gates/#QuantumCircuitOpt.TGate","page":"1-qubit gates","title":"QuantumCircuitOpt.TGate","text":"TGate()\n\nSingle-qubit T gate, equivalent to U3Gate(00fracpi4). This  gate is also referred to as a fracpi8 gate or as a fourth-root of Pauli-ZGate. \n\nMatrix Representation\n\nT = beginpmatrix\n1  0 \n0  e^ipi4\nendpmatrix\n\n\n\n\n\n","category":"function"},{"location":"1_qubit_gates/#TdaggerGate","page":"1-qubit gates","title":"TdaggerGate","text":"","category":"section"},{"location":"1_qubit_gates/","page":"1-qubit gates","title":"1-qubit gates","text":"TdaggerGate","category":"page"},{"location":"1_qubit_gates/#QuantumCircuitOpt.TdaggerGate","page":"1-qubit gates","title":"QuantumCircuitOpt.TdaggerGate","text":"TdaggerGate()\n\nSingle-qubit, hermitian conjugate of the TGate. This gate is equivalent to U3Gate(00-fracpi4). This  gate is also referred to as the fourth-root of Pauli-ZGate. \n\nMatrix Representation\n\nT^dagger = beginpmatrix\n1  0 \n0  e^-ipi4\nendpmatrix\n\n\n\n\n\n","category":"function"},{"location":"1_qubit_gates/#SXGate","page":"1-qubit gates","title":"SXGate","text":"","category":"section"},{"location":"1_qubit_gates/","page":"1-qubit gates","title":"1-qubit gates","text":"SXGate","category":"page"},{"location":"1_qubit_gates/#QuantumCircuitOpt.SXGate","page":"1-qubit gates","title":"QuantumCircuitOpt.SXGate","text":"SXGate()\n\nSingle-qubit square root of pauli-XGate.\n\nMatrix Representation\n\nsqrtX = frac12 beginpmatrix\n1 + i  1 - i \n1 - i  1 + i\nendpmatrix\n\n\n\n\n\n","category":"function"},{"location":"1_qubit_gates/#SXdaggerGate","page":"1-qubit gates","title":"SXdaggerGate","text":"","category":"section"},{"location":"1_qubit_gates/","page":"1-qubit gates","title":"1-qubit gates","text":"SXdaggerGate","category":"page"},{"location":"1_qubit_gates/#QuantumCircuitOpt.SXdaggerGate","page":"1-qubit gates","title":"QuantumCircuitOpt.SXdaggerGate","text":"SXdaggerGate()\n\nSingle-qubit hermitian conjugate of the square root of pauli-XGate, or the SXGate.\n\nMatrix Representation\n\nsqrtX^dagger = frac12 beginpmatrix\n1 - i  1 + i \n1 + i  1 - i\nendpmatrix\n\n\n\n\n\n","category":"function"},{"location":"1_qubit_gates/#PhaseGate","page":"1-qubit gates","title":"PhaseGate","text":"","category":"section"},{"location":"1_qubit_gates/","page":"1-qubit gates","title":"1-qubit gates","text":"PhaseGate","category":"page"},{"location":"1_qubit_gates/#QuantumCircuitOpt.PhaseGate","page":"1-qubit gates","title":"QuantumCircuitOpt.PhaseGate","text":"PhaseGate()\n\nSingle-qubit rotation gate about the Z axis. This is also equivalent to U3Gate(00lambda). This  gate is also referred to as the U1Gate. \n\nMatrix Representation\n\nP(lambda) = beginpmatrix\n    1  0 \n    0  e^ilambda\nendpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#Quantum-Circuits-Library:-Two-qubit-gates","page":"2-qubit gates","title":"Quantum Circuits Library: Two-qubit gates","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"CurrentModule = QuantumCircuitOpt","category":"page"},{"location":"2_qubit_gates/#CNotGate","page":"2-qubit gates","title":"CNotGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"CNotGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.CNotGate","page":"2-qubit gates","title":"QuantumCircuitOpt.CNotGate","text":"CNotGate()\n\nTwo-qubit controlled NOT gate with control and target on first and second qubits, respectively. This is also  called the controlled X gate (CXGate). \n\nCircuit Representation\n\nq_0: ──■──\n     ┌─┴─┐\nq_1: ┤ X ├\n     └───┘\n\nMatrix Representation\n\nCNot = beginpmatrix\n    1  0  0  0 \n    0  1  0  0 \n    0  0  0  1 \n    0  0  1  0\n    endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#CNotRevGate","page":"2-qubit gates","title":"CNotRevGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"CNotRevGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.CNotRevGate","page":"2-qubit gates","title":"QuantumCircuitOpt.CNotRevGate","text":"CNotRevGate()\n\nTwo-qubit reverse controlled NOT gate, with target and control on first and second qubits, respectively. \n\nCircuit Representation\n\n     ┌───┐\nq_0: ┤ X ├\n     └─┬─┘\nq_1: ──■──\n\nMatrix Representation\n\nCNotRev = beginpmatrix\n            1  0  0  0 \n            0  0  0  1 \n            0  0  1  0 \n            0  1  0  0\n            endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#DCXGate","page":"2-qubit gates","title":"DCXGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"DCXGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.DCXGate","page":"2-qubit gates","title":"QuantumCircuitOpt.DCXGate","text":"DCXGate()\n\nTwo-qubit double controlled NOT gate consisting of two back-to-back CNotGates with alternate controls. \n\nCircuit Representation\n\n          ┌───┐\nq_0: ──■──┤ X ├\n     ┌─┴─┐└─┬─┘\nq_1: ┤ X ├──■──\n     └───┘\n\nMatrix Representation\n\nDCX = beginpmatrix\n    1  0  0  0 \n    0  0  0  1 \n    0  1  0  0 \n    0  0  1  0\n    endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#CXGate","page":"2-qubit gates","title":"CXGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"CXGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.CXGate","page":"2-qubit gates","title":"QuantumCircuitOpt.CXGate","text":"CXGate()\n\nTwo-qubit controlled XGate, which is also the same as CNotGate. \n\nCircuit Representation\n\nq_0: ──■──\n     ┌─┴─┐\nq_1: ┤ X ├\n     └───┘\n\nMatrix Representation\n\nCX = beginpmatrix\n    1  0  0  0 \n    0  1  0  0 \n    0  0  0  1 \n    0  0  1  0\n    endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#CXRevGate","page":"2-qubit gates","title":"CXRevGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"CXRevGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.CXRevGate","page":"2-qubit gates","title":"QuantumCircuitOpt.CXRevGate","text":"CXRevGate()\n\nTwo-qubit reverse controlled-X gate, with target and control on first and second qubits, respectively.  This is also the same as CNotRevGate. \n\nCircuit Representation\n\n     ┌───┐\nq_0: ┤ X ├\n     └─┬─┘\nq_1: ──■──\n\nMatrix Representation\n\nCXRev = I otimes 0 ranglelangle 0 + X otimes 1 ranglelangle 1 = beginpmatrix\n        1  0  0  0 \n        0  0  0  1 \n        0  0  1  0 \n        0  1  0  0\n    endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#CYGate","page":"2-qubit gates","title":"CYGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"CYGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.CYGate","page":"2-qubit gates","title":"QuantumCircuitOpt.CYGate","text":"CYGate()\n\nTwo-qubit controlled YGate. \n\nCircuit Representation\n\nq_0: ──■──\n     ┌─┴─┐\nq_1: ┤ Y ├\n     └───┘\n\nMatrix Representation\n\nCY = 0 ranglelangle 0 otimes I + 1 ranglelangle 1 otimes Y = beginpmatrix\n    1  0  0  0 \n    0  1  0  0 \n    0  0  0  -i \n    0  0  i  0\n    endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#CYRevGate","page":"2-qubit gates","title":"CYRevGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"CYRevGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.CYRevGate","page":"2-qubit gates","title":"QuantumCircuitOpt.CYRevGate","text":"CYRevGate()\n\nTwo-qubit reverse controlled-Y gate, with target and control on first and second qubits, respectively. \n\nCircuit Representation\n\n     ┌───┐\nq_0: ┤ Y ├\n     └─┬─┘\nq_1: ──■──\n\nMatrix Representation\n\nCYRev = I otimes 0 ranglelangle 0 + Y otimes 1 ranglelangle 1 = beginpmatrix\n        1  0  0  0 \n        0  0  0  -i \n        0  0  1  0 \n        0  i  0  0\n    endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#CZGate","page":"2-qubit gates","title":"CZGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"CZGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.CZGate","page":"2-qubit gates","title":"QuantumCircuitOpt.CZGate","text":"CZGate()\n\nTwo-qubit, symmetric, controlled ZGate. \n\nCircuit Representation\n\nq_0: ──■──     ─■─\n     ┌─┴─┐  ≡   │\nq_1: ┤ Z ├     ─■─\n     └───┘\n\nMatrix Representation\n\nCZ = 0 ranglelangle 0 otimes I + 1 ranglelangle 1 otimes Z = beginpmatrix\n    1  0  0  0 \n    0  1  0  0 \n    0  0  1  0 \n    0  0  0  -1\n    endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#CZRevGate","page":"2-qubit gates","title":"CZRevGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"CZRevGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.CZRevGate","page":"2-qubit gates","title":"QuantumCircuitOpt.CZRevGate","text":"CZRevGate()\n\nTwo-qubit reverse controlled-Z gate, with target and control on first and second qubits, respectively. \n\nCircuit Representation\n\n     ┌───┐\nq_0: ┤ Z ├\n     └─┬─┘\nq_1: ──■──\n\nMatrix Representation\n\nCZRev = I otimes 0ranglelangle0 + Z otimes 1ranglelangle1 = beginpmatrix\n    1  0  0  0 \n    0  1  0  0 \n    0  0  1  0 \n    0  0  0  -1\n    endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#CHGate","page":"2-qubit gates","title":"CHGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"CHGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.CHGate","page":"2-qubit gates","title":"QuantumCircuitOpt.CHGate","text":"CHGate()\n\nTwo-qubit, symmetric, controlled Hadamard gate (HGate). \n\nCircuit Representation\n\nq_0: ──■──\n     ┌─┴─┐  \nq_1: ┤ H ├    \n     └───┘\n\nMatrix Representation\n\nCH = 0ranglelangle 0 otimes I + 1ranglelangle 1 otimes H = beginpmatrix\n1  0  0  0 \n0  1  0  0 \n0  0  frac1sqrt2  frac1sqrt2 \n0  0  frac1sqrt2  -frac1sqrt2\nendpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#CHRevGate","page":"2-qubit gates","title":"CHRevGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"CHRevGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.CHRevGate","page":"2-qubit gates","title":"QuantumCircuitOpt.CHRevGate","text":"CHRevGate()\n\nTwo-qubit reverse controlled-H gate, with target and control on first and second qubits, respectively. \n\nCircuit Representation\n\n     ┌───┐\nq_0: ┤ H ├\n     └─┬─┘\nq_1: ──■──\n\nMatrix Representation\n\nCHRev = I otimes 0ranglelangle 0 + H otimes 1ranglelangle 1 = beginpmatrix\n        1  0  0  0 \n        0  frac1sqrt2  0  frac1sqrt2 \n        0  0  1  0 \n        0  frac1sqrt2  0  -frac1sqrt2\n    endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#CVGate","page":"2-qubit gates","title":"CVGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"CVGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.CVGate","page":"2-qubit gates","title":"QuantumCircuitOpt.CVGate","text":"CVGate()\n\nTwo-qubit, controlled-V gate, which is also the same as Controlled square-root of X gate (CSXGate).  \n\nCircuit Representation\n\nq_0: ──■──     \n     ┌─┴─┐    \nq_1: ┤ V ├     \n     └───┘\n\nMatrix Representation\n\nCV = beginpmatrix\n        1  0  0  0 \n        0  1  0  0 \n        0  0  05+05i  05-05i \n        0  0  05-05i  05+05i\n    endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#CVRevGate","page":"2-qubit gates","title":"CVRevGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"CVRevGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.CVRevGate","page":"2-qubit gates","title":"QuantumCircuitOpt.CVRevGate","text":"CVRevGate()\n\nTwo-qubit reverse controlled-V gate, with target and control on first and second qubits, respectively. \n\nCircuit Representation\n\n     ┌───┐\nq_0: ┤ V ├\n     └─┬─┘\nq_1: ──■──\n\nMatrix Representation\n\nCVRev = beginpmatrix\n        1  0  0  0 \n        0  05+05i  0  05-05i \n        0  0  1  0 \n        0  05-05i  0  05+05i\n    endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#CVdaggerGate","page":"2-qubit gates","title":"CVdaggerGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"CVdaggerGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.CVdaggerGate","page":"2-qubit gates","title":"QuantumCircuitOpt.CVdaggerGate","text":"CVdaggerGate()\n\nTwo-qubit hermitian conjugate of controlled-V gate, which is also the same as hermitian conjugate Controlled square-root of X gate (CSXGate).  \n\nCircuit Representation\n\nq_0: ──■──     \n     ┌─┴─┐    \nq_1: ┤ V'├     \n     └───┘\n\nMatrix Representation\n\nCVdagger = beginpmatrix\n        1  0  0  0 \n        0  1  0  0 \n        0  0  05-05i  05+05i \n        0  0  05+05i  05-05i\n    endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#CVdaggerRevGate","page":"2-qubit gates","title":"CVdaggerRevGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"CVdaggerRevGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.CVdaggerRevGate","page":"2-qubit gates","title":"QuantumCircuitOpt.CVdaggerRevGate","text":"CVdaggerRevGate()\n\nTwo-qubit hermitian conjugate of reverse controlled-V gate, with target and control on first and second qubits, respectively. \n\nCircuit Representation\n\n     ┌───┐\nq_0: ┤ V'├\n     └─┬─┘\nq_1: ──■──\n\nMatrix Representation\n\nCVdaggerRev = beginpmatrix\n        1  0  0  0 \n        0  05-05i  0  05+05i \n        0  0  1  0 \n        0  05+05i  0  05-05i\n    endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#WGate","page":"2-qubit gates","title":"WGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"WGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.WGate","page":"2-qubit gates","title":"QuantumCircuitOpt.WGate","text":"WGate()\n\nTwo-qubit, W hermitian gate, typically useful to diagonlize the (SwapGate).  \n\nMatrix Representation\n\nW = beginpmatrix\n        1  0  0  0 \n        0  frac1sqrt2  frac1sqrt2  0 \n        0  frac1sqrt2  -frac1sqrt2  0 \n        0  0  0  1\n    endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#CRXGate","page":"2-qubit gates","title":"CRXGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"CRXGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.CRXGate","page":"2-qubit gates","title":"QuantumCircuitOpt.CRXGate","text":"CRXGate(θ::Number)\n\nTwo-qubit controlled RXGate. \n\nCircuit Representation\n\nq_0: ────■────\n     ┌───┴───┐\nq_1: ┤ RX(ϴ) ├\n     └───────┘\n\nMatrix Representation\n\nnewcommandthfractheta2\n\nCRX(theta) q_1 q_0 =\n0ranglelangle0 otimes I + 1ranglelangle1 otimes RX(theta) =\n    beginpmatrix\n        1  0  0  0 \n        0  1  0  0 \n        0  0  costh    -isinth \n        0  0  -isinth  costh\n    endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#CRXRevGate","page":"2-qubit gates","title":"CRXRevGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"CRXRevGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.CRXRevGate","page":"2-qubit gates","title":"QuantumCircuitOpt.CRXRevGate","text":"CRXRevGate(θ::Number)\n\nTwo-qubit controlled reverse RXGate. \n\nCircuit Representation\n\n     ┌───────┐\nq_1: ┤ RX(ϴ) ├\n     └───┬───┘\nq_0: ────■────\n\nMatrix Representation\n\nnewcommandthfractheta2\n\nCRXRev(theta) q_1 q_0 =\n0ranglelangle0 otimes I + 1ranglelangle1 otimes RX(theta) =\n    beginpmatrix\n        1  0  0  0 \n        0  costh  0  -isinth \n        0  0  1  0\n        0  -isinth  0  costh\n    endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#CRYGate","page":"2-qubit gates","title":"CRYGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"CRYGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.CRYGate","page":"2-qubit gates","title":"QuantumCircuitOpt.CRYGate","text":"CRYGate(θ::Number)\n\nTwo-qubit controlled RYGate. \n\nCircuit Representation\n\nq_0: ────■────\n     ┌───┴───┐\nq_1: ┤ RY(ϴ) ├\n     └───────┘\n\nMatrix Representation\n\nnewcommandthfractheta2\n\nCRY(theta) q_1 q_0 =\n0ranglelangle0 otimes I + 1ranglelangle1 otimes RY(theta) =\n    beginpmatrix\n        1  0  0  0 \n        0  1  0  0 \n        0  0  costh    -sinth \n        0  0  sinth  costh\n    endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#CRYRevGate","page":"2-qubit gates","title":"CRYRevGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"CRYRevGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.CRYRevGate","page":"2-qubit gates","title":"QuantumCircuitOpt.CRYRevGate","text":"CRYRevGate(θ::Number)\n\nTwo-qubit controlled reverse RYGate. \n\nCircuit Representation\n\n     ┌───────┐\nq_1: ┤ RY(ϴ) ├\n     └───┬───┘\nq_0: ────■────\n\nMatrix Representation\n\nnewcommandthfractheta2\n\nCRYRev(theta) q_1 q_0 =\n0ranglelangle0 otimes I + 1ranglelangle1 otimes RY(theta) =\n    beginpmatrix\n        1  0  0  0 \n        0  costh  0  -sinth \n        0  0  1  0 \n        0  sinth  0  costh\n    endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#CRZGate","page":"2-qubit gates","title":"CRZGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"CRZGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.CRZGate","page":"2-qubit gates","title":"QuantumCircuitOpt.CRZGate","text":"CRZGate(θ::Number)\n\nTwo-qubit controlled RZGate. \n\nCircuit Representation\n\nq_0: ────■────\n     ┌───┴───┐\nq_1: ┤ RZ(ϴ) ├\n     └───────┘\n\nMatrix Representation\n\nnewcommandthfractheta2\n\nCRZ(theta) q_1 q_0 =\n0ranglelangle0 otimes I + 1ranglelangle1 otimes RZ(theta) =\n    beginpmatrix\n        1  0  0  0 \n        0  1  0  0 \n        0  0  e^-ith    0 \n        0  0  0  e^ith\n    endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#CRZRevGate","page":"2-qubit gates","title":"CRZRevGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"CRZRevGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.CRZRevGate","page":"2-qubit gates","title":"QuantumCircuitOpt.CRZRevGate","text":"CRZRevGate(θ::Number)\n\nTwo-qubit controlled reverse RZGate. \n\nCircuit Representation\n\n     ┌───────┐\nq_1: ┤ RZ(ϴ) ├\n     └───┬───┘\nq_0: ────■────\n\nMatrix Representation\n\nnewcommandthfractheta2\n\nCRZRev(theta) q_1 q_0 =\n0ranglelangle0 otimes I + 1ranglelangle1 otimes RZ(theta) =\n    beginpmatrix\n        1  0  0  0 \n        0  e^-ith  0  0 \n        0  0  1   0 \n        0  0  0  e^ith\n    endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#CU3Gate","page":"2-qubit gates","title":"CU3Gate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"CU3Gate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.CU3Gate","page":"2-qubit gates","title":"QuantumCircuitOpt.CU3Gate","text":"CU3Gate(θ::Number, ϕ::Number, λ::Number)\n\nTwo-qubit, controlled version of the universal rotation gate with three Euler angles (U3Gate). \n\nCircuit Representation\n\nq_0: ──────■──────\n     ┌─────┴─────┐\nq_1: ┤ U3(ϴ,φ,λ) ├\n     └───────────┘\n\nMatrix Representation\n\nnewcommandthfractheta2\n\nCU3(theta phi lambda) q_1 q_0 =\n                0ranglelangle 0 otimes I +\n                1ranglelangle 1 otimes U3(thetaphilambda) =\n                beginpmatrix\n                    1  0    0                   0 \n                    0  1    0                   0 \n                    0  0    cos(th)           -e^ilambdasin(th) \n                    0  0    e^iphisin(th)  e^i(phi+lambda)cos(th)\n                endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#CU3RevGate","page":"2-qubit gates","title":"CU3RevGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"CU3RevGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.CU3RevGate","page":"2-qubit gates","title":"QuantumCircuitOpt.CU3RevGate","text":"CU3RevGate(θ::Number, ϕ::Number, λ::Number)\n\nTwo-qubit, reverse controlled version of the universal rotation gate with three Euler angles (U3Gate). \n\nCircuit Representation\n\n     ┌────────────┐\nq_1: ┤  U3(ϴ,φ,λ) ├\n     └──────┬─────┘\nq_0: ───────■──────\n\nMatrix Representation\n\nnewcommandthfractheta2\n\nCU3(theta phi lambda) q_1 q_0 =\n                0ranglelangle 0 otimes I +\n                1ranglelangle 1 otimes U3(thetaphilambda) =\n                beginpmatrix\n                    1  0    0   0 \n                    0  cos(th)    0  -e^ilambdasin(th) \n                    0  0     1  0 \n                    0  e^iphisin(th)   0   e^i(phi+lambda)cos(th)\n                endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#SwapGate","page":"2-qubit gates","title":"SwapGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"SwapGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.SwapGate","page":"2-qubit gates","title":"QuantumCircuitOpt.SwapGate","text":"SwapGate()\n\nTwo-qubit, symmetric, SWAP gate. \n\nCircuit Representation\n\nq_0: ─X─\n      │\nq_1: ─X─\n\nMatrix Representation\n\nSWAP = beginpmatrix\n1  0  0  0 \n0  0  1  0 \n0  1  0  0 \n0  0  0  1\nendpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#iSwapGate","page":"2-qubit gates","title":"iSwapGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"iSwapGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.iSwapGate","page":"2-qubit gates","title":"QuantumCircuitOpt.iSwapGate","text":"iSwapGate()\n\nTwo-qubit, symmetric and clifford, iSWAP gate.\n\nCircuit Representation\n\nq_0: ─⨂─\n      │     \nq_1: ─⨂─    \n\nMinimum depth representation\n\n      ┌───┐     ┌───┐ ┌───┐\nq_0: ─┤ X ├──■──┤ S ├─┤ X ├─\n      └─┬─┘┌─┴─┐└───┘ └─┬─┘\nq_1: ───■──┤ X ├────────■──\n           └───┘\n\nMatrix Representation\n\niSWAP = beginpmatrix\n1  0  0  0 \n0  0  i  0 \n0  i  0  0 \n0  0  0  1\nendpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#CSXGate","page":"2-qubit gates","title":"CSXGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"CSXGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.CSXGate","page":"2-qubit gates","title":"QuantumCircuitOpt.CSXGate","text":"CSXGate()\n\nTwo-qubit controlled version of (SXGate). \n\nCircuit Representation\n\nq_0: ─────■─────\n     ┌────┴────┐\nq_1: ┤ sqrt(X) ├\n     └─────────┘\n\nMatrix Representation\n\nCSXGate = 0 ranglelangle 0 otimes I + 1 ranglelangle 1 otimes SX = beginpmatrix\n1  0  0  0 \n0  1  0  0 \n0  0  05+05i  05-05i \n0  0  05-05i  05+05i\n    endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#CSXRevGate","page":"2-qubit gates","title":"CSXRevGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"CSXRevGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.CSXRevGate","page":"2-qubit gates","title":"QuantumCircuitOpt.CSXRevGate","text":"CSXRevGate()\n\nTwo-qubit controlled version of the reverse (SXGate). \n\nCircuit Representation\n\n     ┌─────────┐\nq_1: ┤ sqrt(X) ├\n     └────┬────┘\nq_0: ─────■────\n\nMatrix Representation\n\nCSXRevGate = I otimes 0ranglelangle 0 + SX otimes 1ranglelangle 1 = beginpmatrix\n1  0  0  0 \n0  05+05i  0  05-05i \n0  0  1  0 \n0  05-05i  0  05+05i\n    endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#MGate","page":"2-qubit gates","title":"MGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"MGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.MGate","page":"2-qubit gates","title":"QuantumCircuitOpt.MGate","text":"MGate()\n\nTwo-qubit Magic gate, also known as the Ising coupling or the XX gate.\n\nReference: https://doi.org/10.1103/PhysRevA.69.032315\n\nCircuit Representation\n\n      ┌───┐        ┌───┐\nq_0: ─┤ X ├────────┤ S ├\n      └─┬─┘        └─┬─┘        \n        │   ┌───┐  ┌─┴─┐\nq_1: ───■───┤ H ├──┤ S ├\n            └───┘  └───┘\n\nMatrix Representation\n\nM = frac1sqrt2 beginpmatrix\n1  i  0  0 \n0  0  i  1 \n0  0  i  -1 \n1  -i  0  0\nendpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#QFT2Gate","page":"2-qubit gates","title":"QFT2Gate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"QFT2Gate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.QFT2Gate","page":"2-qubit gates","title":"QuantumCircuitOpt.QFT2Gate","text":"QFT2Gate()\n\nTwo-qubit Quantum Fourier Transform (QFT) gate, where the QFT operation on n-qubits is given by: \n\njrangle mapsto frac12^n2 sum_k=0^2^n - 1 e^2pi ijk  2^n krangle\n\nCircuit Representation\n\n     ┌──────┐\nq_0: ┤      ├\n     │ QFT2 │   \nq_1: ┤      ├ \n     └──────┘ \n\nMatrix Representation\n\nM = frac12 beginpmatrix\n1  1  1  1 \n1  i  -1  -i \n1  -1  1  -1 \n1  -i  -1  i\nendpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#HCoinGate","page":"2-qubit gates","title":"HCoinGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"HCoinGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.HCoinGate","page":"2-qubit gates","title":"QuantumCircuitOpt.HCoinGate","text":"HCoinGate()\n\nTwo-qubit, Hadamard Coin gate when implemented in tune with the quantum cellular automata.  Reference: https://doi.org/10.1007/s11128-018-1983-x, https://arxiv.org/pdf/2106.03115.pdf\n\nMatrix Representation\n\nHCoinGate = beginpmatrix\n1  0  0  0 \n0  frac1sqrt2  frac1sqrt2  0 \n0  frac1sqrt2  -frac1sqrt2  0 \n0  0  0  1\nendpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#GroverDiffusionGate","page":"2-qubit gates","title":"GroverDiffusionGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"GroverDiffusionGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.GroverDiffusionGate","page":"2-qubit gates","title":"QuantumCircuitOpt.GroverDiffusionGate","text":"GroverDiffusionGate()\n\nTwo-qubit, Grover's diffusion operator, a key building block of the Glover's algorithm used to find a specific item (with probability > 0.5) within a randomly ordered database of N items in O(sqrt(N)) operations.  Reference: https://arxiv.org/pdf/1804.03719.pdf\n\nMatrix Representation\n\nGroverDiffusionGate = frac12beginpmatrix\n1  -1  -1  -1 \n-1  1  -1  -1 \n-1  -1  1  -1  \n-1  -1  -1  1\nendpmatrix\n\n\n\n\n\n","category":"function"},{"location":"2_qubit_gates/#SycamoreGate","page":"2-qubit gates","title":"SycamoreGate","text":"","category":"section"},{"location":"2_qubit_gates/","page":"2-qubit gates","title":"2-qubit gates","text":"SycamoreGate","category":"page"},{"location":"2_qubit_gates/#QuantumCircuitOpt.SycamoreGate","page":"2-qubit gates","title":"QuantumCircuitOpt.SycamoreGate","text":"SycamoreGate()\n\nTwo-qubit Sycamore Gate, native to Google's universal quantum processor. Reference: quantumai.google/cirq/google/devices\n\nCircuit Representation\n\n     ┌──────┐\nq_0: ┤      ├\n     │ SYC  │   \nq_1: ┤      ├ \n     └──────┘ \n\nMatrix Representation\n\n\nSycamoreGate() = beginpmatrix\n1  0  0  0 \n0  0  -i  0 \n0  -i  0  0  \n0  0  0  e^-i fracpi6\nendpmatrix\n\n\n\n\n\n\n","category":"function"},{"location":"","page":"Introduction","title":"Introduction","text":"<align=\"center\"/>\n<img width=\"790px\" class=\"display-light-only\" src=\"assets/docs_header.png\" alt=\"assets/docs_header.png\"/>\n<img width=\"790px\" class=\"display-dark-only\" src=\"assets/docs_header_dark.png\" alt=\"assets/docs_header.png\"/>","category":"page"},{"location":"#Documentation","page":"Introduction","title":"Documentation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"CurrentModule = QuantumCircuitOpt","category":"page"},{"location":"#Overview","page":"Introduction","title":"Overview","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"QuantumCircuitOpt is a Julia package which implements discrete optimization-based methods for provably optimal synthesis of the architecture for Quantum circuits. While programming Quantum Computers, a primary goal is to build useful and less-noisy quantum circuits from the basic building blocks, also termed as elementary gates which arise due to hardware constraints. Thus, given a desired quantum computation, as a target gate, and a set of elemental one- and two-qubit gates, this package provides a provably optimal, exact (up to global phase and machine precision) or an approximate decomposition with minimum number of elemental gates and CNOT gates. Note that QuantumCircuitOpt currently supports only decompositions of circuits up to ten qubits.","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"To use QuantumCircuitOpt, first download and install Julia. Note that the current version of QuantumCircuitOpt is compatible with Julia 1.0 and later. ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The latest stable release of QuantumCircuitOpt can be installed by entering the following in the Julia REPL-mode:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"import Pkg\nPkg.add(\"QuantumCircuitOpt\")","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"At least one mixed-integer programming solver is required for running QuantumCircuitOpt. The well-known CPLEX or the Gurobi solver is highly recommended, as it is fast, scaleable and can be used to solve on fairly large-scale graphs. However, open-source solvers such as Cbc or GLPK is also compatible with QuantumCircuitOpt which can be installed via the package manager with","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"import Pkg\nPkg.add(\"Cbc\")","category":"page"},{"location":"#Unit-Tests","page":"Introduction","title":"Unit Tests","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"To run the tests in the package, run the following command after installing the QuantumCircuitOpt package.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"import Pkg\nPkg.test(\"QuantumCircuitOpt\")","category":"page"},{"location":"#Acknowledgement","page":"Introduction","title":"Acknowledgement","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This work was supported by Los Alamos National Laboratory's LDRD Early Career Research Award, \"20190590ECR: Discrete Optimization Algorithms for Provable Optimal Quantum Circuit Design\". The primary developer of this package is Harsha Nagarajan (@harshangrjn). ","category":"page"},{"location":"#Citing-QuantumCircuitOpt","page":"Introduction","title":"Citing QuantumCircuitOpt","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"If you find QuantumCircuitOpt useful in your work, we request you to cite the following paper (accepted and yet to appear online):  ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"@inproceedings{NagarajanLockwoodCoffrin2021,\n  title={{QuantumCircuitOpt}: An Open-source Framework for Provably Optimal Quantum Circuit Design},\n  author={Nagarajan, Harsha and Lockwood, Owen and Coffrin, Carleton},\n  booktitle={SC21: The International Conference for High Performance Computing, Networking, Storage, and Analysis},\n  series={Workshop on Quantum Computing Software},\n  pages={1-7},\n  year={2021},\n  organization={IEEE Computer Society}\n}","category":"page"},{"location":"3_qubit_gates/#Quantum-Circuits-Library:-Three-qubit-gates","page":"3-qubit gates","title":"Quantum Circuits Library: Three-qubit gates","text":"","category":"section"},{"location":"3_qubit_gates/","page":"3-qubit gates","title":"3-qubit gates","text":"CurrentModule = QuantumCircuitOpt","category":"page"},{"location":"3_qubit_gates/#ToffoliGate","page":"3-qubit gates","title":"ToffoliGate","text":"","category":"section"},{"location":"3_qubit_gates/","page":"3-qubit gates","title":"3-qubit gates","text":"ToffoliGate","category":"page"},{"location":"3_qubit_gates/#QuantumCircuitOpt.ToffoliGate","page":"3-qubit gates","title":"QuantumCircuitOpt.ToffoliGate","text":"ToffoliGate()\n\nThree-qubit Toffoli gate, also known as the CCX (controlled-controlled-NOT) gate. \n\nCircuit Representation\n\nq_0: ──■──\n       │\nq_1: ──■──\n     ┌─┴─┐\nq_2: ┤ X ├\n     └───┘\n\nMatrix Representation\n\nToffoli     =\n            0 rangle langle 0 otimes I otimes I + 1 rangle langle 1 otimes CXGate =\n            beginpmatrix\n                1  0  0  0  0  0  0  0\n                0  1  0  0  0  0  0  0\n                0  0  1  0  0  0  0  0\n                0  0  0  1  0  0  0  0\n                0  0  0  0  1  0  0  0\n                0  0  0  0  0  1  0  0\n                0  0  0  0  0  0  0  1\n                0  0  0  0  0  0  1  0\n            endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"3_qubit_gates/#CSwapGate","page":"3-qubit gates","title":"CSwapGate","text":"","category":"section"},{"location":"3_qubit_gates/","page":"3-qubit gates","title":"3-qubit gates","text":"CSwapGate","category":"page"},{"location":"3_qubit_gates/#QuantumCircuitOpt.CSwapGate","page":"3-qubit gates","title":"QuantumCircuitOpt.CSwapGate","text":"CSwapGate()\n\nThree-qubit, controlled SwapGate, also known as the Fredkin gate.\n\nCircuit Representation\n\nq_0: ─■─\n      │\nq_1: ─X─\n      │\nq_2: ─X─\n\nMatrix Representation\n\nCSwapGate =\n            beginpmatrix\n            1  0  0  0  0  0  0  0 \n            0  1  0  0  0  0  0  0 \n            0  0  1  0  0  0  0  0 \n            0  0  0  1  0  0  0  0 \n            0  0  0  0  1  0  0  0 \n            0  0  0  0  0  0  1  0 \n            0  0  0  0  0  1  0  0 \n            0  0  0  0  0  0  0  1 \n        endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"3_qubit_gates/#CCZGate","page":"3-qubit gates","title":"CCZGate","text":"","category":"section"},{"location":"3_qubit_gates/","page":"3-qubit gates","title":"3-qubit gates","text":"CCZGate","category":"page"},{"location":"3_qubit_gates/#QuantumCircuitOpt.CCZGate","page":"3-qubit gates","title":"QuantumCircuitOpt.CCZGate","text":"CCZGate()\n\nThree-qubit controlled-controlled Z gate. \n\nCircuit Representation\n\nq_0: ─■─\n      │\nq_1: ─■─\n      │\nq_2: ─■─\n\nMatrix Representation\n\nCCZGate =\n            beginpmatrix\n            1  0  0  0  0  0  0  0 \n            0  1  0  0  0  0  0  0 \n            0  0  1  0  0  0  0  0 \n            0  0  0  1  0  0  0  0 \n            0  0  0  0  1  0  0  0 \n            0  0  0  0  0  1  0  0 \n            0  0  0  0  0  0  1  0 \n            0  0  0  0  0  0  0  -1 \n        endpmatrix\n\n\n\n\n\n","category":"function"},{"location":"3_qubit_gates/#PeresGate","page":"3-qubit gates","title":"PeresGate","text":"","category":"section"},{"location":"3_qubit_gates/","page":"3-qubit gates","title":"3-qubit gates","text":"PeresGate","category":"page"},{"location":"3_qubit_gates/#QuantumCircuitOpt.PeresGate","page":"3-qubit gates","title":"QuantumCircuitOpt.PeresGate","text":"PeresGate()\n\nThree-qubit Peres gate. This gate is equivalent to ToffoliGate followed by the CNotGate in 3 qubits.  Reference: https://doi.org/10.1103/PhysRevA.32.3266\n\nCircuit Representation\n\nq_0: ──■─────■──          \n       │   ┌─┴─┐\nq_1: ──■───┤ X ├\n     ┌─┴─┐ └───┘\nq_2: ┤ X ├──────\n     └───┘\n\nMatrix Representation\n\nPeresGate =\n            beginpmatrix\n            1  0  0  0  0  0  0  0 \n            0  1  0  0  0  0  0  0 \n            0  0  1  0  0  0  0  0 \n            0  0  0  1  0  0  0  0 \n            0  0  0  0  0  0  1  0 \n            0  0  0  0  0  0  0  1 \n            0  0  0  0  0  1  0  0 \n            0  0  0  0  1  0  0  0 \n        endpmatrix\n\n\n\n\n\n","category":"function"}]
}
